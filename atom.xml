<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fox Hound</title>
  
  <subtitle>For Geek</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arnoforst.github.io/"/>
  <updated>2019-09-05T03:46:41.277Z</updated>
  <id>https://arnoforst.github.io/</id>
  
  <author>
    <name>Arno Frost</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git常用命令介绍</title>
    <link href="https://arnoforst.github.io/2019/09/04/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
    <id>https://arnoforst.github.io/2019/09/04/Git常用命令介绍/</id>
    <published>2019-09-04T04:31:02.000Z</published>
    <updated>2019-09-05T03:46:41.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-常用命令介绍"><a href="#Git-常用命令介绍" class="headerlink" title="Git 常用命令介绍"></a>Git 常用命令介绍</h1><p>版本：<code>v0.3</code></p><p>[TOC]</p><h2 id="1-基础说明"><a href="#1-基础说明" class="headerlink" title="1. 基础说明"></a>1. 基础说明</h2><h3 id="git-介绍"><a href="#git-介绍" class="headerlink" title="git 介绍"></a>git 介绍</h3><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener">Git简介</a></p><h3 id="git-常见概念"><a href="#git-常见概念" class="headerlink" title="git 常见概念"></a>git 常见概念</h3><ul><li><code>commit</code>: 提交</li><li><code>commitId</code>: 提交对应的哈希值</li><li><code>branch</code>: 分支</li><li><code>HEAD</code>: 头指针</li><li><code>origin</code>: 远端</li><li><code>conflict</code>：冲突</li><li><code>merge</code>: 合并</li><li><code>rebase</code>：变基</li><li><code>fetch</code>: 更新</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="media/15676511913048.jpg" alt></p><p><strong>Git 可以大概分为三个区</strong><br>Git 本地数据管理，大概可以分为三个区，<code>工作区</code>,<code>暂存区</code>和<code>版本库</code>。</p><ul><li><p><code>工作区</code>（Working Directory）<br>是我们直接编辑的地方，例如 Android Studio 打开的项目，记事本打开的文本等，肉眼可见，直接操作。</p></li><li><p><code>暂存区</code>（Stage 或 Index）<br>数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交流。</p></li><li><p><code>版本库</code>（commit History）<br>存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程仓库了。</p><h3 id="add命令"><a href="#add命令" class="headerlink" title="add命令"></a>add命令</h3></li><li><p><code>git add .</code>：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。（当前目录与子目录）</p></li><li><p><code>git add -u</code>：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写）</p></li><li><p><code>git add -A</code> ：是上面两个功能的合集（git add –all的缩写）（所有目录）</p></li></ul><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><ul><li><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">Github:gitignore</a></li></ul><h3 id="commit-checkout"><a href="#commit-checkout" class="headerlink" title="commit/checkout"></a>commit/checkout</h3><ul><li>检出分支</li><li>检出文件</li><li>还原文件<h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><code>git diff [&lt;options&gt;] [&lt;commit&gt;] [--] [&lt;path&gt;...]</code><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3></li><li><code>git reset</code> : 清空git add 的文件</li><li><code>git reset HEAD</code>：默认mixed模式</li></ul><p><img src="media/15676535334343.jpg" alt></p><h3 id="clone-amp-fetch-amp-pull"><a href="#clone-amp-fetch-amp-pull" class="headerlink" title="clone &amp; fetch &amp; pull"></a>clone &amp; fetch &amp; pull</h3><ul><li><code>git clone [-b &lt;name&gt;] &lt;repository&gt; [&lt;directory&gt;]</code></li><li><code>fetch</code>: </li><li><code>pull</code>: fetch + merge</li></ul><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><ul><li><p><code>git stash save &quot;save message&quot;</code>  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p></li><li><p><code>git stash list</code>  ：查看stash了哪些存储</p></li><li><p><code>git stash show</code> ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加<code>stash@{$num}</code>，比如第二个 <code>git stash show stash@{1}</code></p></li><li><p><code>git stash show -p</code> : 显示第一个存储的改动，如果想显示其他存存储，命令：<code>git stash show  stash@{$num}  -p</code> ，比如第二个：<code>git stash show  stash@{1}  -p</code></p></li><li><p><code>git stash apply</code> :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，<code>git stash apply stash@{$num}</code> ， 比如第二个：<code>git stash apply stash@{1}</code></p></li><li><p><code>git stash pop</code> ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</p></li><li><p><code>git stash drop stash@{$num}</code> ：丢弃stash@{$num}存储，从列表中删除这个存储</p></li><li><p><code>git stash clear</code> ：删除所有缓存的stash</p></li></ul><h2 id="2-merge-amp-rebase"><a href="#2-merge-amp-rebase" class="headerlink" title="2. merge &amp; rebase"></a>2. merge &amp; rebase</h2><table><thead><tr><th align="center">说明/方式</th><th align="center">merge</th><th align="center">rebase</th></tr></thead><tbody><tr><td align="center">特点</td><td align="center">自动创建一个新的commit,如果合并的时候遇到冲突，仅需要修改后重新commit</td><td align="center">会合并之前的commit历史</td></tr><tr><td align="center">优点</td><td align="center">记录了真实的commit情况，包括每个分支的详情</td><td align="center">得到更简洁的项目历史，去掉了merge commit</td></tr><tr><td align="center">缺点</td><td align="center">因为每次merge会自动产生一个merge commit，所以在使用一些git 的GUI tools，特别是commit比较频繁时，看到分支很杂乱。</td><td align="center">如果合并出现代码问题不容易定位，因为re-write了history</td></tr></tbody></table><p>合并时如果出现冲突需要按照如下步骤解决：</p><ul><li>修改冲突部分</li><li>git add</li><li>git rebase –continue/skip</li><li>不要在git add 之后习惯性的执行 git commit命令</li></ul><p><a href="http://gitbook.liuhui998.com/4_2.html" target="_blank" rel="noopener">GitBook- rebase&amp;merge</a></p><h2 id="3-rebase-常见功能"><a href="#3-rebase-常见功能" class="headerlink" title="3. rebase 常见功能"></a>3. rebase 常见功能</h2><p><strong>梳理分支（合并提交，调整顺序，剔除等）</strong></p><h3 id="git-pull-–rebase"><a href="#git-pull-–rebase" class="headerlink" title="git pull –rebase"></a>git pull –rebase</h3><blockquote><p>当我们从远程拉代码的时候如果使用：git pull –rebase，则会以rebase的方式进行更新，而不是默认的merge。</p></blockquote><h3 id="git-rebase-–interactive"><a href="#git-rebase-–interactive" class="headerlink" title="git rebase –interactive"></a>git rebase –interactive</h3><p><code>git rebase [-i | --interactive] [&lt;options&gt;] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]               [&lt;upstream&gt; [&lt;branch&gt;]]</code></p><ul><li><code>p</code>：保留当前commit，不做处理。</li><li><code>r</code>：修改commit message。(<code>git commit --amend</code>)</li><li><code>e</code>：修改这个commit作的修改。比如某个commit漏掉了什么配置，想要再提交新的文件; 或者删除一些无用代码，等等都可以用这个命令。</li><li><code>s</code>：保留这个commit的修改，但是把它合并到前一个commit中。</li><li><code>d</code>：删除commit</li></ul><h3 id="不要在远程推送分支使用rebase操作"><a href="#不要在远程推送分支使用rebase操作" class="headerlink" title="不要在远程推送分支使用rebase操作"></a>不要在远程推送分支使用rebase操作</h3><p><a href="https://hellofrank.github.io/2018/04/27/Git-Rebase-%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">Git Rebase 黄金法则问题</a></p><h2 id="4-patch-amp-cherry-pick"><a href="#4-patch-amp-cherry-pick" class="headerlink" title="4. patch &amp; cherry-pick"></a>4. patch &amp; cherry-pick</h2><h3 id="patch-和diff-的区别"><a href="#patch-和diff-的区别" class="headerlink" title="patch 和diff 的区别"></a>patch 和diff 的区别</h3><p>Git 提供了两种补丁方案，一是用git diff生成的UNIX标准补丁.diff文件，二是git format-patch生成的Git专用.patch 文件。<br><strong>.diff文件只是记录文件改变的内容，不带有commit记录信息,多个commit可以合并成一个diff文件。</strong><br><strong>.patch文件带有记录文件改变的内容，也带有commit记录信息,每个commit对应一个patch文件。</strong></p><p><a href="https://juejin.im/post/5b5851976fb9a04f844ad0f4" target="_blank" rel="noopener">Git 打补丁– patch 和 diff 的使用</a></p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><ul><li><p><code>git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]  [-S[&lt;keyid&gt;]] &lt;commit&gt;...</code></p></li><li><p><code>git cherry-pick &lt;commitId&gt;...</code></p></li></ul><p><a href="https://learngitbranching.js.org/?NODEMO" target="_blank" rel="noopener">git 沙盒模式</a></p><h2 id="5-杂项"><a href="#5-杂项" class="headerlink" title="5. 杂项"></a>5. 杂项</h2><h3 id="协同工作流程"><a href="#协同工作流程" class="headerlink" title="协同工作流程"></a>协同工作流程</h3><p><img src="media/15676536737667.jpg" alt></p><p><a href="http://www.fwhyy.com/2018/06/Use-the-Merge-Request-working-mode-in-GitLab-in-the-team/" target="_blank" rel="noopener">在团队中使用GitLab中的Merge Request工作模式</a></p><p><a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="noopener">Git工作流指南 - GitHub</a></p><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><p><code>git revert &lt;commitId&gt;</code></p><h3 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h3><p>初始化<br><code>git submodule init</code><br>添加子仓库<br><code>git submodule add ssh://git@139.219.128.51:5837/zhengrong/CRBluetoothCore_android.git</code><br>更新子仓库<br><code>git submodule foreach git pull</code></p><p><a href="https://segmentfault.com/a/1190000003076028" target="_blank" rel="noopener">使用Git Submodule管理子模块</a></p><h3 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h3><p> <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noopener">Angular 团队的规范</a></p><ul><li>标题行: 必填, 描述主要修改类型和内容</li><li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释: 放 Breaking Changes 或 Closed Issues</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://juejin.im/post/5b5d50bd5188251b3e646c5c" target="_blank" rel="noopener">如何优雅地pull request</a></li><li><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></li></ul><h3 id="辅助插件类"><a href="#辅助插件类" class="headerlink" title="辅助插件类"></a>辅助插件类</h3><ul><li><p>.gitconfig</p></li><li><p><a href="https://github.com/tj/git-extras/blob/master/Commands.md" target="_blank" rel="noopener">GitHub:git-extras</a></p></li><li><p><a href="https://github.com/git-chglog/git-chglog" target="_blank" rel="noopener">Github:git-chglog</a>:<br><code>git-chglog v1.10.8..v1.11.0 -&gt; CHANGELOG.md</code></p></li></ul><p><img src="media/git%20log.jpg" alt="git log"></p><p><img src="media/changlog.jpg" alt="changlog"></p><h2 id="6-更新日志："><a href="#6-更新日志：" class="headerlink" title="6. 更新日志："></a>6. 更新日志：</h2><table><thead><tr><th>版本</th><th>时间</th><th>说明</th></tr></thead><tbody><tr><td>version 0.1</td><td>2019年09月03日21:32:43</td><td>初版</td></tr><tr><td>version 0.2</td><td>2019年09月04日12:34:34</td><td>完善杂项介绍</td></tr><tr><td>version 0.3</td><td>2019年09月05日10:36:54</td><td>添加基础说明，添加部分杂项</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-常用命令介绍&quot;&gt;&lt;a href=&quot;#Git-常用命令介绍&quot; class=&quot;headerlink&quot; title=&quot;Git 常用命令介绍&quot;&gt;&lt;/a&gt;Git 常用命令介绍&lt;/h1&gt;&lt;p&gt;版本：&lt;code&gt;v0.3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;

      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
      <category term="git" scheme="https://arnoforst.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>安卓全局单例刷新Token</title>
    <link href="https://arnoforst.github.io/2019/03/20/%E5%AE%89%E5%8D%93%E5%85%A8%E5%B1%80%E5%8D%95%E4%BE%8B%E5%88%B7%E6%96%B0Token/"/>
    <id>https://arnoforst.github.io/2019/03/20/安卓全局单例刷新Token/</id>
    <published>2019-03-20T01:47:25.000Z</published>
    <updated>2019-06-27T06:16:38.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>version 0.3</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前阶段公司的业务比较忙,很长时间没有整理出来什么博客.最近刚空出些时间,简单再整理一些记录.</p><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因:"></a>产生原因:</h2><p>客户端是被动向服务器查询登录状态,一些网络请求需要一个刷新token来验证客户端是否处于登录态,是则可以进行用户操作,否则做登出操作.</p><p>刚开始直接单纯的每个请求刷新token,刷新token,然后请求是没什么问题的.</p><p>但是随着版本迭代,任务增多,有些时候,比如app首次启动, 会进行一些列用户相关操作, 比如拉取用户信息, 拉取特定的活动项目,这样一个刷新token的操作可能会并发, 而我们的服务端刷新token每次可能都会不一样,这就产生了一些问题. 以下会展开示意.</p><h2 id="之前的方案-并发刷新token"><a href="#之前的方案-并发刷新token" class="headerlink" title="之前的方案(并发刷新token)"></a>之前的方案(并发刷新token)</h2><p>为了简化理解我画了几张图,来说明情况,为了表示并发,我用RequestA,RequestB,RequestC分别表示三个请求,Server表示服务端</p><p><img src="https://i.loli.net/2019/03/20/5c91aaea82080.png" alt="~~理想状态~~刷新token"></p><p>可以看见理想状态下,其实是没什么问题,请求都能正常收到与发送,但前提是他们是只有<strong>当A请求完全完成后</strong>B的后续请求,刷新token才不会受到干扰.</p><h2 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h2><p>然而,提到了随着业务增多,实际中大多请求都是并发的,于是乎就有可能有下面的情况.</p><p><img src="https://i.loli.net/2019/03/20/5c91aaea9b360.png" alt="实际刷新token"></p><p>可以看到,实际中,很有可能产生,A,B同时刷新token,而在A拿到新<strong>Token A</strong>去再一次请求时,B已经从服务器拿到了<strong>Token B</strong>导致了A请求又一次失败,随着并发的增多这种失败的可能性越来越多.</p><h2 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h2><p>我所想的是全局有一个单例的线程来掌管整个Token的刷新,并且这个token的刷新不是并发,而是队列,但是又不能让之后的请求变成队列. 否则简单的将所有请求变成队列即可,但实际情况我们根本不会让请求都是串行,无论从用户体验还是代码的书写上都是不好的.</p><p>所以在与iOS端讨论后,我们决定使用单一管理,并可阻塞的队列方式来管理token的请求过程,确保app内不会并发发送请求token的过程.</p><p><img src="https://i.loli.net/2019/03/22/5c94407d7401e.png" alt="修改后刷新机制.png"></p><p>改进后就是主要几点:</p><ol><li>当A请求过期后,需要向<code>TokenManager</code>去请求token.</li><li><code>TokenManager</code>会阻塞住队列,让后来的B请求等待.</li><li>当刷新完成后,通知所有队列中的对象,因为这个<code>TokenManager</code>只负责刷新返回token一个职责</li><li>所有请求拿到新的token,再来并发执行而互不影响.</li></ol><h2 id="代码概要"><a href="#代码概要" class="headerlink" title="代码概要"></a>代码概要</h2><p>主要是实现一个任务队列,并要求阻塞, 因为刷新token也是一个异步请求,所以可以用<code>wait()</code>来阻塞住,当一次请求完成后,使用<code>notify()</code>来让队列继续执行,然后再加入一个超时规则,一段时间内,不会重新刷新token,加快之后的token请求</p><p>那么在安卓中,<code>HandlerThread</code>内部已经有了一个loop的实现,就很方便处理这中情景,而不必要自己去写一些任务队列与Loop,简化代码量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//单独开辟一个线程来处理looper</span></span><br><span class="line">    tokenThread = <span class="keyword">new</span> HandlerThread(<span class="string">"token-handlerThread"</span>);</span><br><span class="line">    tokenThread.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过handleMessage来处理每个任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(tokenThread.getLooper()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        getOrRefreshTokenWithRetry(msg.arg1, (RefreshTokenListener) msg.obj);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        getRefreshToken((RefreshTokenListener) msg.obj);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        getOrRefreshToken((RefreshTokenListener) msg.obj);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接获取或刷新token</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getOrRefreshToken</span><span class="params">(@NotNull RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时定时器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Timer[] timeOutTimer = &#123;<span class="keyword">new</span> Timer()&#125;;</span><br><span class="line">    <span class="keyword">if</span> (checkIsTokenExpired()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            MobileAccount.getInst().refreshToken(mContext, <span class="keyword">new</span> MobileAccount.RefreshCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> code, String refreshedToken)</span> </span>&#123;</span><br><span class="line">                    lastToken = refreshedToken;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        listener.onSuccess(refreshedToken);</span><br><span class="line">                    &#125;</span><br><span class="line">                    lastRefreshTime = System.currentTimeMillis();</span><br><span class="line">                    cancaleRequestTimer(timeOutTimer);</span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailed</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        listener.doLogOut(code);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cancaleRequestTimer(timeOutTimer);</span><br><span class="line">                    lastRefreshTime = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNetError</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        listener.onError(errorCode);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cancaleRequestTimer(timeOutTimer);</span><br><span class="line">                    lastRefreshTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 超时防止</span></span><br><span class="line">                TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            listener.onError(-<span class="number">9</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                            mLock.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                timeOutTimer[<span class="number">0</span>].schedule(timerTask, REFRESH_EXPIRED_TIME);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mLock.wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//直接获得</span></span><br><span class="line">        listener.onSuccess(lastToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当任务执行到访问网络刷新token时,通过信号量<code>wait()</code>阻塞住任务,当收到回调时<code>notify()</code>去执行,为了防止超时,内部起了一个定时器.</p><p>外部通过<code>RefreshTokenListener</code>来处理token的回调,做相应的处理.<br>相对于外部请求,依然是无感知<code>TokenManager</code>的存在.</p><p>外部调用时:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TokenManager.getInstance().getToken(<span class="keyword">new</span> TokenManager.RefreshTokenListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogOut</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TokenManager</span></span><br><span class="line"><span class="comment"> * 用户Token统一管理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xin.xu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenManager</span> <span class="keyword">implements</span> <span class="title">ITokenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TokenManager"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> TokenManager singleton;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token过期时间 默认25分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TOKEN_EXPIRED_TIME = <span class="number">25</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新等待超时时间 30秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> REFRESH_EXPIRED_TIME = <span class="number">30</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动检查时间 25分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUTO_REFERSH_TIME = <span class="number">25</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastRefreshTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存中Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String lastToken;</span><br><span class="line">    <span class="keyword">private</span> Object mLock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> HandlerThread tokenThread;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TokenManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TokenManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (TokenManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> TokenManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"init: "</span>);</span><br><span class="line">        mContext = context;</span><br><span class="line">        tokenThread = <span class="keyword">new</span> HandlerThread(<span class="string">"token-handlerThread"</span>);</span><br><span class="line">        tokenThread.start();</span><br><span class="line"></span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler(tokenThread.getLooper()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            doGetOrRefreshTokenWithRetry(msg.arg1, (RefreshTokenListener) msg.obj);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            doForceRefreshToken((RefreshTokenListener) msg.obj);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            doGetOrRefreshToken((RefreshTokenListener) msg.obj);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"destroy: "</span>);</span><br><span class="line">        mContext = <span class="keyword">null</span>;</span><br><span class="line">        tokenThread.getLooper().quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化刷新定时器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"autoRefresh: "</span>);</span><br><span class="line"><span class="comment">//        TokenHeartTimer tokenHeartTimer = new TokenHeartTimer();</span></span><br><span class="line"><span class="comment">//        tokenHeartTimer.start(-1, AUTO_REFERSH_TIME);</span></span><br><span class="line"></span><br><span class="line">        getmHandler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//满足登录条件后判断是否应该刷新</span></span><br><span class="line">                forceRefreshToken(<span class="keyword">new</span> RefreshTokenListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">                        AILog.d(TAG, <span class="string">"autoRefresh onSuccess() called with: token = ["</span> + token + <span class="string">"]"</span>);</span><br><span class="line">                        autoRefresh();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                        AILog.e(TAG, <span class="string">"autoRefresh doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                        AILog.e(TAG, <span class="string">"autoRefresh onError() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        autoRefresh();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, AUTO_REFERSH_TIME);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Handler</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Handler <span class="title">getmHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mHandler = <span class="keyword">new</span> Handler(tokenThread.getLooper()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">                    <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                doGetOrRefreshTokenWithRetry(msg.arg1, (RefreshTokenListener) msg.obj);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                doForceRefreshToken((RefreshTokenListener) msg.obj);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                doGetOrRefreshToken((RefreshTokenListener) msg.obj);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> mHandler;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mHandler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得用户Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getToken</span><span class="params">(@NotNull RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"getToken() called with: listener = ["</span> + listener + <span class="string">"]"</span>);</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.obj = listener;</span><br><span class="line"></span><br><span class="line">        getmHandler().sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有重试的获取token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> retryCount 重试次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTokenWithRetry</span><span class="params">(<span class="keyword">int</span> retryCount, RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"getTokenWithRetry() called with: retryCount = ["</span> + retryCount + <span class="string">"], listener = ["</span> + listener + <span class="string">"]"</span>);</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.obj = listener;</span><br><span class="line">        message.what = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (retryCount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            retryCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (retryCount &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            retryCount = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        message.arg1 = retryCount;</span><br><span class="line"></span><br><span class="line">        getmHandler().sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 强制刷新Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forceRefreshToken</span><span class="params">(RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"forceRefreshToken() called with: listener = ["</span> + listener + <span class="string">"]"</span>);</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.obj = listener;</span><br><span class="line">        message.what = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        getmHandler().sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试并发请求token稳定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTokenManager</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"testTokenManager() called with: number = ["</span> + number + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> finalI = i;</span><br><span class="line">                    TokenManager.getInstance().forceRefreshToken(<span class="keyword">new</span> TokenManager.RefreshTokenListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"initAutoRefresh:"</span> + finalI + <span class="string">" onSuccess() called with: token = ["</span> + token + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"initAutoRefresh"</span> + finalI + <span class="string">" doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                            ToastUtils.showShortToast(<span class="string">"登录已失效,请重新登录"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"initAutoRefresh"</span> + finalI + <span class="string">" onError() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> finalI1 = i;</span><br><span class="line">                    TokenManager.getInstance().getToken(<span class="keyword">new</span> TokenManager.RefreshTokenListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"initAutoRefresh:"</span> + finalI1 + <span class="string">" onSuccess() called with: token = ["</span> + token + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"initAutoRefresh"</span> + finalI1 + <span class="string">" doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"initAutoRefresh"</span> + finalI1 + <span class="string">" onError() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查token是否过期 true 过期 false 不过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkIsTokenExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> expired = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//25分钟刷新token</span></span><br><span class="line">        <span class="keyword">if</span> (System.currentTimeMillis() - lastRefreshTime &lt; TOKEN_EXPIRED_TIME) &#123;</span><br><span class="line">            expired = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AILog.d(TAG, <span class="string">"checkIsTokenExpired() expired = "</span> + expired);</span><br><span class="line">        <span class="keyword">return</span> expired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取或刷新token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doGetOrRefreshToken</span><span class="params">(@NotNull RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"doGetOrRefreshToken: "</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 防止重复返回listener标记</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] calledFlag = &#123;<span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="comment">// 超时防止</span></span><br><span class="line">        TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                calledFlag[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    listener.onError(NET_ERROR);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mLock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (checkIsTokenExpired()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                MobileAccount.getInst().refreshToken(mContext, <span class="keyword">new</span> MobileAccount.RefreshCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> code, String refreshedToken)</span> </span>&#123;</span><br><span class="line">                        AILog.d(TAG, <span class="string">" doGetOrRefreshToken onSuccess() called with: code = ["</span> + code + <span class="string">"], refreshedToken = ["</span> + refreshedToken + <span class="string">"]"</span>);</span><br><span class="line">                        cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                        userUpload(refreshedToken);</span><br><span class="line">                        lastToken = refreshedToken;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                            listener.onSuccess(refreshedToken);</span><br><span class="line">                        &#125;</span><br><span class="line">                        lastRefreshTime = System.currentTimeMillis();</span><br><span class="line">                        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                            mLock.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                        AILog.e(TAG, <span class="string">"doGetOrRefreshToken doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                            listener.doLogout(code);</span><br><span class="line">                        &#125;</span><br><span class="line">                        AILog.d(TAG, <span class="string">"LoginEvent LOG_OUT by refershToken: "</span>);</span><br><span class="line">                        <span class="comment">//不合法token清除</span></span><br><span class="line">                        EventBus.getDefault().post(<span class="keyword">new</span> LoginEvent(LOG_OUT));</span><br><span class="line">                        lastRefreshTime = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                            mLock.notify();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">                        AILog.e(TAG, <span class="string">"doGetOrRefreshToken onError() called with: errorCode = ["</span> + errorCode + <span class="string">"]"</span>);</span><br><span class="line">                        cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                            listener.onError(errorCode);</span><br><span class="line">                        &#125;</span><br><span class="line">                        lastRefreshTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                            mLock.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AILog.d(TAG, <span class="string">"doGetOrRefreshToken with not fresh: "</span> + lastToken);</span><br><span class="line">            <span class="comment">//直接获得</span></span><br><span class="line">            listener.onSuccess(lastToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带有重试的直接获取或刷新token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doGetOrRefreshTokenWithRetry</span><span class="params">(<span class="keyword">int</span> retryCount, @NotNull RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"doGetOrRefreshTokenWithRetry() called with: retryCount = ["</span> + retryCount + <span class="string">"], listener = ["</span> + listener + <span class="string">"]"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 防止重复返回listener标记</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] calledFlag = &#123;<span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="comment">// 超时防止</span></span><br><span class="line">        TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                calledFlag[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    listener.onError(NET_ERROR);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mLock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (checkIsTokenExpired()) &#123;</span><br><span class="line">            startTimer(timerTask);</span><br><span class="line">            <span class="keyword">if</span> (mContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                MobileAccount.getInst().refreshToken(mContext, <span class="keyword">new</span> MobileAccount.RefreshCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> code, String refreshedToken)</span> </span>&#123;</span><br><span class="line">                        AILog.d(TAG, <span class="string">"doGetOrRefreshTokenWithRetry onSuccess() called with: code = ["</span> + code + <span class="string">"], refreshedToken = ["</span> + refreshedToken + <span class="string">"]"</span>);</span><br><span class="line">                        cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                        userUpload(refreshedToken);</span><br><span class="line">                        lastToken = refreshedToken;</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                            listener.onSuccess(refreshedToken);</span><br><span class="line">                        &#125;</span><br><span class="line">                        lastRefreshTime = System.currentTimeMillis();</span><br><span class="line">                        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                            mLock.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                        AILog.e(TAG, <span class="string">"doGetOrRefreshTokenWithRetry doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                            listener.doLogout(code);</span><br><span class="line">                        &#125;</span><br><span class="line">                        AILog.d(TAG, <span class="string">"LoginEvent LOG_OUT by refresh token with retry: "</span>);</span><br><span class="line">                        <span class="comment">//不合法token清除</span></span><br><span class="line">                        EventBus.getDefault().post(<span class="keyword">new</span> LoginEvent(LOG_OUT));</span><br><span class="line">                        lastRefreshTime = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                            mLock.notify();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">                        AILog.e(TAG, <span class="string">"doGetOrRefreshTokenWithRetry onError() called with: errorCode = ["</span> + errorCode + <span class="string">"]"</span>);</span><br><span class="line">                        cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                        lastRefreshTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (retryCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//递归重试</span></span><br><span class="line">                            doGetOrRefreshTokenWithRetry(retryCount - <span class="number">1</span>, listener);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                                listener.onError(errorCode);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                                mLock.notify();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mLock.wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AILog.d(TAG, <span class="string">"doGetOrRefreshTokenWithRetry with not fresh: "</span> + lastToken);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//直接获得</span></span><br><span class="line">            listener.onSuccess(lastToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 强制刷新token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doForceRefreshToken</span><span class="params">(@NotNull RefreshTokenListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 防止重复返回listener标记</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] calledFlag = &#123;<span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="comment">// 超时防止</span></span><br><span class="line">        TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                calledFlag[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    listener.onError(NET_ERROR);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mLock.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mContext != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            startTimer(timerTask);</span><br><span class="line"></span><br><span class="line">            MobileAccount.getInst().refreshToken(mContext, <span class="keyword">new</span> MobileAccount.RefreshCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> code, String refreshedToken)</span> </span>&#123;</span><br><span class="line">                    AILog.d(TAG, <span class="string">"doForceRefreshToken onSuccess() called with: code = ["</span> + code + <span class="string">"], refreshedToken = ["</span> + refreshedToken + <span class="string">"]"</span>);</span><br><span class="line">                    cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                    userUpload(refreshedToken);</span><br><span class="line">                    lastToken = refreshedToken;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                        listener.onSuccess(refreshedToken);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    lastRefreshTime = System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                    AILog.e(TAG, <span class="string">"doForceRefreshToken doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                    cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                        listener.doLogout(code);</span><br><span class="line">                    &#125;</span><br><span class="line">                    AILog.d(TAG, <span class="string">"LoginEvent LOG_OUT by forceRefresh: "</span>);</span><br><span class="line">                    <span class="comment">//不合法token清除</span></span><br><span class="line">                    EventBus.getDefault().post(<span class="keyword">new</span> LoginEvent(LOG_OUT));</span><br><span class="line"></span><br><span class="line">                    lastRefreshTime = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> errorCode)</span> </span>&#123;</span><br><span class="line">                    AILog.e(TAG, <span class="string">"doForceRefreshToken onError() called with: errorCode = ["</span> + errorCode + <span class="string">"]"</span>);</span><br><span class="line">                    cancaleRequestTimer(timerTask);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span> &amp;&amp; !calledFlag[<span class="number">0</span>]) &#123;</span><br><span class="line">                        AILog.d(TAG, <span class="string">"doGetOrRefreshTokenWithRetry cancel time out error"</span>);</span><br><span class="line">                        listener.onError(errorCode);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    lastRefreshTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                        mLock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                    mLock.wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动超时定时器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timerTask</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startTimer</span><span class="params">(TimerTask timerTask)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"startTimer() called with: timerTask = ["</span> + timerTask + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">if</span> (timerTask != <span class="keyword">null</span> &amp;&amp; timer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            timer.schedule(timerTask, REFRESH_EXPIRED_TIME);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消超时定时器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timerTask</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancaleRequestTimer</span><span class="params">(TimerTask timerTask)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"cancaleRequestTimer() called with: timerTask = ["</span> + timerTask + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">if</span> (timerTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            timerTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RefreshTokenListener</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 刷新token成功返回</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String token)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 需要做登出操作</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 失败</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> code 错误码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部定时器检查</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenHeartTimer</span> <span class="keyword">extends</span> <span class="title">TimerCheck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTimerCheckWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AILog.d(TAG, <span class="string">"TokenHeartTimer doTimerCheckWork() called"</span>);</span><br><span class="line">            Account account = UserExt.getAccount();</span><br><span class="line">            <span class="keyword">if</span> (account != <span class="keyword">null</span> &amp;&amp; mContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(account.getUid(mContext))) &#123;</span><br><span class="line">                    <span class="comment">//满足登录条件后判断是否应该刷新</span></span><br><span class="line">                    forceRefreshToken(<span class="keyword">new</span> RefreshTokenListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">                            AILog.d(TAG, <span class="string">"TokenHeartTimer onSuccess() called with: token = ["</span> + token + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogout</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                            AILog.e(TAG, <span class="string">"TokenHeartTimer doLogout() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">                            AILog.e(TAG, <span class="string">"TokenHeartTimer onError() called with: code = ["</span> + code + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTimeOutWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">userUpload</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        AILog.d(TAG, <span class="string">"userUpload() called with: token = ["</span> + token + <span class="string">"]"</span>);</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uid = <span class="string">""</span>;</span><br><span class="line">            String phoneNumber = <span class="string">""</span>;</span><br><span class="line">            Account account = UserExt.getAccount();</span><br><span class="line">            <span class="keyword">if</span> (account != <span class="keyword">null</span>) &#123;</span><br><span class="line">                uid = account.getUid(mContext);</span><br><span class="line">                phoneNumber = account.getPhoneNumber(mContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(uid)) &#123;</span><br><span class="line">                jsonObject.put(<span class="string">"userid"</span>, uid);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jsonObject.put(<span class="string">"userid"</span>, <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(phoneNumber)) &#123;</span><br><span class="line">                jsonObject.put(<span class="string">"phone"</span>, phoneNumber);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jsonObject.put(<span class="string">"phone"</span>, <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jsonObject.put(<span class="string">"token"</span>, token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">            AILog.e(TAG, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        ClientInfoModel.getInstance().uploadUserInfo(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明:"></a>更新说明:</h2><table><thead><tr><th>版本</th><th>时间</th><th>说明</th></tr></thead><tbody><tr><td>version 0.1</td><td>2019年03月20日11:29:20</td><td>初版</td></tr><tr><td>version 0.2</td><td>2019年03月22日09:56:52</td><td>修改TokenManager图表</td></tr><tr><td>version 0.3</td><td>2019年03月28日10:21:02</td><td>优化代码</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;version 0.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前阶段公司的业务比较忙,很长时间没有整理出来什么
      
    
    </summary>
    
      <category term="技巧" scheme="https://arnoforst.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>为macOS开启局域网ss</title>
    <link href="https://arnoforst.github.io/2019/01/15/%E4%B8%BAmacOS%E5%BC%80%E5%90%AF%E5%B1%80%E5%9F%9F%E7%BD%91ss/"/>
    <id>https://arnoforst.github.io/2019/01/15/为macOS开启局域网ss/</id>
    <published>2019-01-15T07:55:27.000Z</published>
    <updated>2019-03-20T08:33:27.085Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>version 0.0.1</p></blockquote><h2 id="1-通过-brew-安装-privoxy"><a href="#1-通过-brew-安装-privoxy" class="headerlink" title="1. 通过 brew 安装 privoxy"></a>1. 通过 brew 安装 privoxy</h2><p><code>brew install privoxy</code></p><p>安装后查看安装目录</p><p><code>brew privoxy list</code></p><p>打开目录并编辑config文件</p><p><code>open /usr/local/etc/privoxy/config</code></p><h2 id="2-添加需要映射的端口"><a href="#2-添加需要映射的端口" class="headerlink" title="2. 添加需要映射的端口"></a>2. 添加需要映射的端口</h2><p>本地ss端口<br><code>forward-socks5t   /               127.0.0.1:1086 .</code>(注意要有默认的点)</p><p>转发的端口</p><p><code>listen-address  0.0.0.0:6666</code></p><h3 id="3-运行privoxy"><a href="#3-运行privoxy" class="headerlink" title="3. 运行privoxy"></a>3. 运行privoxy</h3><p><code>sudo /usr/local/Cellar/privoxy/3.0.26/sbin/privoxy /usr/local/etc/privoxy/config</code></p><h3 id="4-添加开机启动"><a href="#4-添加开机启动" class="headerlink" title="4. 添加开机启动"></a>4. 添加开机启动</h3><p>将变量添加到 <code>.bash_profile</code> 中: </p><p><code>export PATH=$PATH:/usr/local/Cellar/privoxy/3.0.26/sbin/</code></p><p>新建一个文本文档, 将如下添加后, 修改后缀名为.sh</p><blockquote></blockquote><p># 添加开机启动:<br>ln -sfv /usr/local/opt/privoxy/*.plist ~/Library/LaunchAgents<br># 开启 Privoxy:<br>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.privoxy.plist<br># 如果不需要用 launchctl 就直接运行:<br>privoxy /usr/local/etc/privoxy/config</p><p>在终端运行 :</p><p>eg: <code>sh test.sh</code></p><h2 id="5-查看是否已经开启"><a href="#5-查看是否已经开启" class="headerlink" title="5. 查看是否已经开启"></a>5. 查看是否已经开启</h2><p><code>netstat -na | grep 6666</code></p><p><img src="https://s2.ax1x.com/2019/01/15/FzwTQU.png" alt="监听端口"></p><p>如上, 已经成功监听</p><h2 id="6-更新说明"><a href="#6-更新说明" class="headerlink" title="6. 更新说明:"></a>6. 更新说明:</h2><table><thead><tr><th>版本</th><th>时间</th><th>说明</th></tr></thead><tbody><tr><td>version 0.0.1</td><td>2019年01月15日16:10:55</td><td>初版</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;version 0.0.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-通过-brew-安装-privoxy&quot;&gt;&lt;a href=&quot;#1-通过-brew-安装-privoxy&quot; class=&quot;headerlink&quot; title=&quot;1. 通
      
    
    </summary>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
  </entry>
  
  <entry>
    <title>git日常(二)----常用git 命令</title>
    <link href="https://arnoforst.github.io/2018/11/01/git%E6%97%A5%E5%B8%B8-%E4%BA%8C-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://arnoforst.github.io/2018/11/01/git日常-二-git常用命令/</id>
    <published>2018-11-01T01:54:55.000Z</published>
    <updated>2018-11-01T02:02:48.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>version 0.0.2</p></blockquote><h2 id="1-日志类"><a href="#1-日志类" class="headerlink" title="1. 日志类"></a>1. 日志类</h2><blockquote><p>显示每次更新的文件修改统计信息</p></blockquote><p><code>git log --stat</code></p><blockquote><p>显示最近两次提交</p></blockquote><p><code>git log -p -2</code></p><blockquote><p>根据自定义格式过滤日志</p></blockquote><p><code>git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</code></p><blockquote><p>使用ASCII表示简单git图</p></blockquote><p><code>git log --pretty=format:&quot;%h %s&quot; --graph</code></p><blockquote><p>显示最近一周的提交</p></blockquote><p><code>git log --since=1.weeks</code></p><blockquote><p>显示指定作者的提交</p></blockquote><p><code>git log --author=xuxin</code></p><blockquote><p>显示指定区间段的提交</p></blockquote><p><code>git log --author=xuxin --since=&quot;2018-04-01&quot; --before=&quot;2018-10-01&quot;</code></p><blockquote><p>显示提交但未合并的信息</p></blockquote><p><code>git log --pretty=&quot;%h - %s&quot; --author=xuxin --since=&quot;2018-04-01&quot; \   --before=&quot;2018-10-08&quot; --no-merges -- t/</code></p><h2 id="2-检索类"><a href="#2-检索类" class="headerlink" title="2. 检索类"></a>2. 检索类</h2><blockquote><p>根据commit信息搜索提交</p></blockquote><p><code>git log -g --grep=&quot;KEYWORD&quot;</code><br><code>git log --all --grep=&#39;KEYWORD&#39;</code></p><blockquote><p>查找有关的关键字</p></blockquote><p><code>git log --all --pretty=\&quot;format:%Cgreen%H %Cblue%s\n%b%Creset\&quot; --name-status --grep KEYWORD</code></p><blockquote><p>根据CommitID查看所属分支</p></blockquote><p><code>git branch -a --contains CommitID</code></p><h2 id="3-操作类"><a href="#3-操作类" class="headerlink" title="3. 操作类"></a>3. 操作类</h2><blockquote><p>(未使用add)放弃本地所有更改</p></blockquote><p><code>git checkout .</code></p><blockquote><p>撤销特定文件 (<strong>注意<code>--</code></strong> )</p></blockquote><p><code>git checkout -- filepathname</code></p><blockquote><p>(已经使用add)放弃本地所有更改</p></blockquote><p><code>git reset --hard HEAD^</code></p><blockquote><p>回退到任意版本</p></blockquote><p><code>git reset --hard CommitID</code></p><blockquote><p>修改错误的提交</p></blockquote><p><code>git commit --amend</code></p><blockquote><p>查看某人提交的代码</p></blockquote><p><code>git log --author=&quot;xuxin&quot; --pretty=tformat: --numstat | awk &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc }&#39; -</code></p><blockquote><p>统计每个人提交的代码</p></blockquote><p><code>git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc }&#39; -; done</code></p><blockquote><p>查看提交者 前五名</p></blockquote><p><code>git log --pretty=&#39;%aN&#39; | sort | uniq -c | sort -k1 -n -r | head -n 5</code></p><h2 id="4-注"><a href="#4-注" class="headerlink" title="4. 注:"></a>4. 注:</h2><blockquote><p>添加到全局变量中的代码(注意author修改)</p></blockquote><p><code>git config --global alias.lm  &quot;log --no-merges --color --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --author=&#39;xuxin&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p><p><code>git config --global alias.lms  &quot;log --no-merges --color --stat --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --author=&#39;xuxin&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p><p><code>git config --global alias.ls &quot;log --no-merges --color --graph --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p><p><code>git config --global alias.lss &quot;log --no-merges --color --stat --graph --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p><p><code>git config --global alias.find &quot;log --all --pretty=\&quot;format:%Cred%cd\n%Cgreen%H %Cblue%s\n%b%Creset\&quot; --name-status --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --grep&quot;</code></p><blockquote><p>gitconfig中代码:</p></blockquote><p><code>[alias]    lm = log --no-merges --color --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --author=&#39;xuxin&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit    find = log --all --pretty=\&quot;format:%Cred%cd\n%Cgreen%H %Cblue%s\n%b%Creset\&quot; --name-status --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --grep    lss = log --no-merges --color --stat --graph --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit    lms = log --no-merges --color --stat --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --author=&#39;xuxin&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit    ls = log --no-merges --color --graph --date=format:&#39;%Y-%m-%d %H:%M:%S&#39; --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</code></p><h3 id="4-2-参考"><a href="#4-2-参考" class="headerlink" title="4.2 参考:"></a>4.2 参考:</h3><ul><li><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2" target="_blank" rel="noopener">git 查看提交历史</a></p></li><li><p><a href="https://www.cnblogs.com/bellkosmos/p/5923439.html" target="_blank" rel="noopener">git log命令全解析</a></p></li><li><p><a href="https://www.cnblogs.com/qufanblog/p/7606105.html" target="_blank" rel="noopener">git 放弃本地修改</a></p></li><li><p><a href="https://www.jianshu.com/p/8fd14064c201" target="_blank" rel="noopener">git代码行统计命令集</a></p></li></ul><h3 id="4-3-更新说明"><a href="#4-3-更新说明" class="headerlink" title="4.3 更新说明:"></a>4.3 更新说明:</h3><table><thead><tr><th>版本</th><th>时间</th><th>说明</th></tr></thead><tbody><tr><td>version 0.0.1</td><td>2018年10月09日15:45:06</td><td>初版</td></tr><tr><td>version 0.0.2</td><td>2018年10月24日15:51:51</td><td>添加代码统计命令</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;version 0.0.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-日志类&quot;&gt;&lt;a href=&quot;#1-日志类&quot; class=&quot;headerlink&quot; title=&quot;1. 日志类&quot;&gt;&lt;/a&gt;1. 日志类&lt;/h2&gt;&lt;blockquote
      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
  </entry>
  
  <entry>
    <title>git日常(一)----基础篇</title>
    <link href="https://arnoforst.github.io/2018/09/30/git%E6%97%A5%E5%B8%B8-%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://arnoforst.github.io/2018/09/30/git日常-一-基础篇/</id>
    <published>2018-09-30T06:54:17.000Z</published>
    <updated>2018-10-15T11:31:03.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-多用户配置流程"><a href="#git-多用户配置流程" class="headerlink" title="git 多用户配置流程"></a>git 多用户配置流程</h1><pre><code>## 1. 生成自定义密钥文件</code></pre><p>进入目录<br><code>cd ~/.ssh/</code> 或 <code>cd /Users/arno/.ssh</code>  或  <code>cd .ssh</code></p><p>根据用户邮箱生成不同的key文件<br><code>ssh-keygen -t rsa -C &quot;davidxuxin@qq.com&quot;</code><br><code>ssh-keygen -t rsa -C &quot;xin.xu@carrbot.com&quot;</code></p><p>key分别设置别名 如: github_id_rsa,ileja_id_rsa</p><h2 id="2-将生成的key填入到相应-github-或-gitlab-的SSH密钥中"><a href="#2-将生成的key填入到相应-github-或-gitlab-的SSH密钥中" class="headerlink" title="2. 将生成的key填入到相应 github 或 gitlab 的SSH密钥中"></a>2. 将生成的key填入到相应 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">github</a> 或 <a href="http://code.cheluobo.cn/profile/keys" target="_blank" rel="noopener">gitlab</a> 的SSH密钥中</h2><p><code>cat github_id_rsa</code><br><code>cat ileja_id_rsa</code></p><h2 id="3-在-ssh目录下创建config-文件"><a href="#3-在-ssh目录下创建config-文件" class="headerlink" title="3. 在.ssh目录下创建config 文件"></a>3. 在.ssh目录下创建config 文件</h2><p><code>vim config</code></p><p>填写相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#github</span><br><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">User daivdxuxin@qq.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">Port 443</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line"></span><br><span class="line"># 该文件用于配置私钥对应的服务器</span><br><span class="line"># 配置公司账户(xin.xu@carrobot.com)</span><br><span class="line">Host git@code.cheluobo.cn</span><br><span class="line">HostName http://github.com</span><br><span class="line">User xin.xu@carrbot.com</span><br><span class="line">Port 5837</span><br><span class="line">IdentityFile ~/.ssh/ileja_id_rsa</span><br></pre></td></tr></table></figure><h2 id="4-在agent中添加自定义的key"><a href="#4-在agent中添加自定义的key" class="headerlink" title="4. 在agent中添加自定义的key"></a>4. 在agent中添加自定义的key</h2><p>后台启动ssh-agent<br><code>eval &quot;$(ssh-agent -s)&quot;</code></p><p>将自定义的key添加到agent中<br><code>ssh-add ~/.ssh/github_id_rsa</code><br><code>ssh-add ~/.ssh/ileja_id_rsa</code></p><h2 id="5-测试连接"><a href="#5-测试连接" class="headerlink" title="5. 测试连接"></a>5. 测试连接</h2><p><code>ssh -T git@github.com</code> 或 <code>ssh -vT git@github.com</code></p><p><code>git clone -b branch_meebot_1.5.0 git@42.159.143.73:guilbert/carrobot_lite_android.git</code></p><h2 id="6-常见问题解答"><a href="#6-常见问题解答" class="headerlink" title="6. 常见问题解答"></a>6. 常见问题解答</h2><ul><li><a href="https://help.github.com/categories/authenticating-to-github/" target="_blank" rel="noopener">Github-常见SSH密钥问题</a></li><li><a href="https://help.github.com/articles/reviewing-your-ssh-keys/" target="_blank" rel="noopener">Github-查看SSH密钥</a></li><li><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent" target="_blank" rel="noopener">Github-添加SSH 到ssh-agent</a></li><li><a href="https://help.github.com/articles/troubleshooting-ssh/" target="_blank" rel="noopener">Github-SSH故障排除</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-多用户配置流程&quot;&gt;&lt;a href=&quot;#git-多用户配置流程&quot; class=&quot;headerlink&quot; title=&quot;git 多用户配置流程&quot;&gt;&lt;/a&gt;git 多用户配置流程&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;## 1. 生成自定义密钥文件&lt;/code&gt;&lt;/pr
      
    
    </summary>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
  </entry>
  
  <entry>
    <title>常用日志过滤手册</title>
    <link href="https://arnoforst.github.io/2018/05/11/%E5%B8%B8%E7%94%A8%E6%97%A5%E5%BF%97%E8%BF%87%E6%BB%A4%E6%89%8B%E5%86%8C/"/>
    <id>https://arnoforst.github.io/2018/05/11/常用日志过滤手册/</id>
    <published>2018-05-11T03:56:02.000Z</published>
    <updated>2018-05-11T08:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用日志过滤手册-v0-1"><a href="#常用日志过滤手册-v0-1" class="headerlink" title="常用日志过滤手册 v0.1"></a>常用日志过滤手册 v0.1</h2><p>命令格式:</p><pre><code>[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...</code></pre><h3 id="1-显示日志"><a href="#1-显示日志" class="headerlink" title="1. 显示日志"></a>1. 显示日志</h3><pre><code>adb logcat</code></pre><h3 id="2-过滤优先级"><a href="#2-过滤优先级" class="headerlink" title="2.  过滤优先级"></a>2.  过滤优先级</h3><table><thead><tr><th>标签</th><th>说明 (级别低-&gt;高)</th></tr></thead><tbody><tr><td>V</td><td>Verbos(级别最低)</td></tr><tr><td>D</td><td>Debug</td></tr><tr><td>I</td><td>Info</td></tr><tr><td>W</td><td>Warning</td></tr><tr><td>E</td><td>Error</td></tr><tr><td>F</td><td>Fatal</td></tr><tr><td>S</td><td>Silent(级别最高)</td></tr></tbody></table><p>按照某级别过滤日志:</p><pre><code>adb logcat *:W</code></pre><p>会将 <code>Warning</code>、<code>Error</code>、<code>Fatal</code> 和 <code>Silent</code> 日志输出。</p><h3 id="3-配合正则筛选日志"><a href="#3-配合正则筛选日志" class="headerlink" title="3. 配合正则筛选日志"></a>3. 配合正则筛选日志</h3><pre><code>adb logcat -v threadtime |grep --color = auto -iE &quot;XXX|YYY&quot;</code></pre><p>会将匹配 <code>XXX</code>和 <code>YYY</code>忽略大小写的匹配日志输出</p><h3 id="4-正则筛选日志文件-txt文件"><a href="#4-正则筛选日志文件-txt文件" class="headerlink" title="4. 正则筛选日志文件(txt文件)"></a>4. 正则筛选日志文件(txt文件)</h3><pre><code>grep --color=auto -iE &quot;XXX|YYY&quot; e:\desktop\1.txt</code></pre><p>会将 <code>1.txt</code> 匹配 <code>XXX</code>和 <code>YYY</code>忽略大小写的匹配日志输出</p><h3 id="5-根据正则关键字查看某一文件并输出到新的文件中"><a href="#5-根据正则关键字查看某一文件并输出到新的文件中" class="headerlink" title="5. 根据正则关键字查看某一文件并输出到新的文件中"></a>5. 根据正则关键字查看某一文件并输出到新的文件中</h3><pre><code>grep -rni &quot;OfflineChild&quot; 原始文件目录及名字 |tee 新文件目录及名字</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用日志过滤手册-v0-1&quot;&gt;&lt;a href=&quot;#常用日志过滤手册-v0-1&quot; class=&quot;headerlink&quot; title=&quot;常用日志过滤手册 v0.1&quot;&gt;&lt;/a&gt;常用日志过滤手册 v0.1&lt;/h2&gt;&lt;p&gt;命令格式:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[adb]
      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="adb" scheme="https://arnoforst.github.io/tags/adb/"/>
    
      <category term="logcat" scheme="https://arnoforst.github.io/tags/logcat/"/>
    
  </entry>
  
  <entry>
    <title>VPS快速部署手册</title>
    <link href="https://arnoforst.github.io/2018/01/12/VPSSetting/"/>
    <id>https://arnoforst.github.io/2018/01/12/VPSSetting/</id>
    <published>2018-01-12T06:42:43.000Z</published>
    <updated>2018-05-11T08:38:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VPS快速部署手册"><a href="#VPS快速部署手册" class="headerlink" title="VPS快速部署手册"></a>VPS快速部署手册</h1><ul><li><p>version 0.1<br>基础配置<br>2018年1月10日17:40:33</p></li><li><p>version 0.2<br>添加了本地化,以及部分说明<br>2018年1月12日14:51:29</p></li></ul><blockquote><p><strong>注:本手册每个模块互相独立,按需参考即可</strong></p></blockquote><h2 id="1-部署SSR"><a href="#1-部署SSR" class="headerlink" title="1. 部署SSR"></a>1. 部署SSR</h2><blockquote><h3 id="1-1-安装依赖软件"><a href="#1-1-安装依赖软件" class="headerlink" title="1.1 安装依赖软件"></a>1.1 安装依赖软件</h3></blockquote><blockquote><p><strong>环境 Ubuntu 16.04.3 LTS</strong></p></blockquote><p>更新软件源</p><pre><code>apt-get update</code></pre><p>安装python pip</p><pre><code>apt-get install python-pip</code></pre><p>升级pip</p><pre><code>pip install --upgrade pip</code></pre><p>安装中文语言包</p><pre><code>apt-get install language-pack-zh-hant</code></pre><blockquote><h3 id="1-2-安装SSR"><a href="#1-2-安装SSR" class="headerlink" title="1.2 安装SSR"></a>1.2 安装SSR</h3></blockquote><p>安装SSR</p><pre><code>pip install shadowsocks</code></pre><p>配置ss json文件(参考1.3)</p><pre><code>vim /etc/shadowsocks.json</code></pre><p>使用screen开启服务</p><pre><code>screen -S ssr</code></pre><p>开启ss服务</p><pre><code>ssserver -c /etc/shadowsocks.json</code></pre><p>返回</p><pre><code>C -a-d</code></pre><p>重新连接开启ssr服务的screen</p><pre><code>screen -r ssr</code></pre><blockquote><h3 id="1-3-ssr配置文件"><a href="#1-3-ssr配置文件" class="headerlink" title="1.3 ssr配置文件"></a>1.3 ssr配置文件</h3></blockquote><pre><code>    {    &quot;server&quot;:&quot;服务器外网ip&quot;, //&quot;server&quot;:&quot;198.96.88.112&quot;,    &quot;local_address&quot;:&quot;127.0.0.1&quot;,    &quot;local_port&quot;:1080,    &quot;timeout&quot;:300,    &quot;port_password&quot;:{    &quot;端口号&quot;:&quot;密码&quot;,    //(&quot;8888&quot;,&quot;123456&quot;)    &quot;端口号&quot;:&quot;密码&quot;    //(&quot;&quot;8889&quot;,&quot;123457&quot;)    },    &quot;method&quot;:&quot;rc4-md5&quot;,        //加密规则    &quot;protocol&quot;: &quot;origin&quot;,    //混淆插件    &quot;protocol_param&quot;: &quot;&quot;,    &quot;obfs&quot;: &quot;plain&quot;,    &quot;obfs_param&quot;: &quot;&quot;,    &quot;workers&quot;: 1}</code></pre><h2 id="2-NextCloud安装"><a href="#2-NextCloud安装" class="headerlink" title="2. NextCloud安装"></a>2. NextCloud安装</h2><blockquote><p>2.1 基础软件安装</p></blockquote><p>Apache 安装</p><pre><code>sudo apt-get install apache2</code></pre><p>MySQL 安装</p><pre><code>sudo apt-get install mysql-server mysql-client</code></pre><p>PHP 安装</p><pre><code>sudo apt-get install phpmyadmin</code></pre><blockquote><p>2.2 安装Nextcloud</p></blockquote><pre><code>//下载文件wget https://download.nextcloud.com/server/releases/nextcloud-12.0.4.tar.bz2//解压文件bz2格式tar -xjvf nextcloud-12.0.4.tar.bz2//解压文件zip格式unzip nextcloud-12.0.4.zip//将文件拷贝至服务器目录cp -r nextcloud /var/www/html///修改nextcloud权限</code></pre><blockquote><p>2.3 启用额外插件</p></blockquote><p>重新启动模块</p><pre><code>sudo a2enmod rewritesudo a2enmod headers</code></pre><p>zip模块</p><pre><code>apt-get install php-zip</code></pre><p>curl模块</p><pre><code>apt-get install php-curl</code></pre><p>修改php.ini文件</p><pre><code>vim /etc/php/7.0/apache2/php.ini</code></pre><p>修改以下内容</p><pre><code>;extension=php_mbstring.dll ==&gt;extension=php_mbstring.dll</code></pre><p>修改apache2.conf文件</p><pre><code>vim /etc/apache2/apache2.conf</code></pre><p>修改以下内容</p><pre><code>&lt;Directory /var/www/&gt;Options Indexes FollowSymLinksAllowOverride None ==&gt; AllowOverride AllRequire all granted&lt;/Directory&gt;</code></pre><p>重启Apache</p><pre><code>/etc/init.d/apache2 restart</code></pre><blockquote><p>2.4 配置文件位置</p></blockquote><p>Apache2配置文件</p><pre><code>vim /etc/apache2/apache2.conf</code></pre><p>php配置文件路径</p><pre><code>vim /etc/php/7.0/apache2/php.ini</code></pre><p>apache2启动</p><pre><code>/etc/init.d/apache2 start/etc/init.d/apache2 restart/etc/init.d/apache2 stop</code></pre><p>移除文件 </p><pre><code>rm -rf /var/www/html/nextcloud/</code></pre><h2 id="3-本地化Ubuntu"><a href="#3-本地化Ubuntu" class="headerlink" title="3.本地化Ubuntu"></a>3.本地化Ubuntu</h2><h3 id="3-1-安装中文支持及语言包"><a href="#3-1-安装中文支持及语言包" class="headerlink" title="3.1 安装中文支持及语言包"></a>3.1 安装中文支持及语言包</h3><p>安装中文语言包</p><pre><code>apt-get install language-pack-zh-hant language-pack-zh-hans</code></pre><p>配置相关环境变量：</p><pre><code>vim /etc/environment</code></pre><p>在文件中增加语言和编码的设置：</p><pre><code>LANG=&quot;zh_CN.UTF-8&quot;LANGUAGE=&quot;zh_CN:zh:en_US:en&quot;</code></pre><p>如:</p><pre><code>LANG=&quot;zh_CN.UTF-8&quot;LANGUAGE=&quot;zh_CN:zh:en_US:en&quot;PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games&quot;</code></pre><p>重新设置本地配置：</p><pre><code>dpkg-reconfigure locales</code></pre><h3 id="3-2-更改时区"><a href="#3-2-更改时区" class="headerlink" title="3.2 更改时区"></a>3.2 更改时区</h3><p>选择时区</p><pre><code>tzselect</code></pre><p>复制文件到/etc目录下</p><pre><code>sudo cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</code></pre><p>如改为中国北京时间,直接输入以下(重新连接会消失)</p><pre><code>TZ=&apos;Asia/Beijing&apos;; export TZ</code></pre><p>配置时间文件(重新连接不会消失)</p><pre><code>//选择Asia - Shanghaidpkg-reconfigure tzdata</code></pre><p>重启VPS</p><pre><code>reboot</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VPS快速部署手册&quot;&gt;&lt;a href=&quot;#VPS快速部署手册&quot; class=&quot;headerlink&quot; title=&quot;VPS快速部署手册&quot;&gt;&lt;/a&gt;VPS快速部署手册&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;version 0.1&lt;br&gt;基础配置&lt;br&gt;2018年1月10日
      
    
    </summary>
    
      <category term="技巧" scheme="https://arnoforst.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
  </entry>
  
  <entry>
    <title>Spicy</title>
    <link href="https://arnoforst.github.io/2017/12/22/Spicy/"/>
    <id>https://arnoforst.github.io/2017/12/22/Spicy/</id>
    <published>2017-12-22T02:22:04.000Z</published>
    <updated>2018-05-11T08:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spicy-Android端信息展示软件"><a href="#Spicy-Android端信息展示软件" class="headerlink" title="Spicy (Android端信息展示软件)"></a>Spicy (Android端信息展示软件)</h1><p> 最近感觉自己实际编码经验太少，花了大概三周跟着慕课去学习完成这个demo练习，收获很多。除了组件化思想外，同时也练习了下mvp模式和许多开发中的小技巧，整体完成下来还是有很多收获。</p><h2 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h2><p>多图加载,动态添加布局,视频播放，组件化开发，封装了通用sdk，并采用mvp重构。集成推送分享，生成扫描二维码，图表生成，评论，搜索登录,版本更新等功能。</p><p><img src="https://i.imgur.com/5vF88Fd.gif" alt><br>大图浏览</p><p><img src="https://i.imgur.com/yfzxRB4.png" alt><br>二维码生成</p><p><img src="https://i.imgur.com/4ERxjzG.png" alt><br>未启动状态推送</p><p><img src="https://i.imgur.com/0JIWwEq.gif" alt><br>视频播放</p><p><img src="https://i.imgur.com/lgmEDR4.png" alt><br>walle多渠道打包</p><p>2017-12-6 16:36:20 version0.0.1软件初步搭建<br>2017-12-22 10:02:13 version 1.0 release 第一个正式发行版完成</p><p>项目地址:<a href="https://gitee.com/arnofrost/Spicy" target="_blank" rel="noopener">Spicy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spicy-Android端信息展示软件&quot;&gt;&lt;a href=&quot;#Spicy-Android端信息展示软件&quot; class=&quot;headerlink&quot; title=&quot;Spicy (Android端信息展示软件)&quot;&gt;&lt;/a&gt;Spicy (Android端信息展示软件)&lt;/
      
    
    </summary>
    
      <category term="项目" scheme="https://arnoforst.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>View绘制机制</title>
    <link href="https://arnoforst.github.io/2017/11/09/View%E7%BB%98%E5%88%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://arnoforst.github.io/2017/11/09/View绘制机制/</id>
    <published>2017-11-09T03:28:39.000Z</published>
    <updated>2019-06-27T06:20:41.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View的绘制机制"><a href="#View的绘制机制" class="headerlink" title="View的绘制机制"></a>View的绘制机制</h1><h2 id="1-view树的绘制流程"><a href="#1-view树的绘制流程" class="headerlink" title="1. view树的绘制流程"></a>1. view树的绘制流程</h2><p>(当Activity接收到用户触摸焦点的时候, 会被请求去绘制布局;请求是由安卓Framework层去处理绘制,从根节点去对布局进行测量和绘制ViewRoot类中)</p><pre><code>measure -&gt; layout -&gt; draw</code></pre><p>measure: 是否重新计算视图大小; </p><blockquote><p>(递归)view 会对所有子元素进行测量, 测量过程从父的ViewGroup传递到子View里面, 经过子元素的递归, 测量好所有子元素的长度, 再进行递归, 反复之后就完成了ViewGroup的测量;</p></blockquote><p>layout: 是否需要重新安置视图位置;</p><p>draw: 是否需要重绘;</p><h2 id="2-measure"><a href="#2-measure" class="headerlink" title="2. measure"></a>2. measure</h2><h3 id="2-1-ViewGroup-LayoutParams"><a href="#2-1-ViewGroup-LayoutParams" class="headerlink" title="2.1 ViewGroup.LayoutParams:"></a>2.1 ViewGroup.LayoutParams:</h3><p><img src="https://i.imgur.com/ex5kK7D.png" alt></p><p>用来指定视图的高度和宽度</p><h3 id="2-2-MeasureSpec-测量规格"><a href="#2-2-MeasureSpec-测量规格" class="headerlink" title="2.2 MeasureSpec(测量规格):"></a>2.2 MeasureSpec(测量规格):</h3><p>32位int值 , 最高两位表示SpecMode是模式占位符, 后面30位表示测量规格的大小;</p><blockquote><p>在一个空间measure过程中, 会将这个View的LayoutParams结合父容器生成一个MeasureSpec, MeasureSpec就会规定好怎样去测量这个View容器的大小, 返回给父容器, 父容器根据这个去测量大小</p></blockquote><table><thead><tr><th>模式名称</th><th>模式数值</th><th>实际数值</th></tr></thead><tbody><tr><td>UNSPECIFIED</td><td>00</td><td>000000000000000000001111011000</td></tr><tr><td>EXACTLY</td><td>01</td><td>000000000000000000001111011000</td></tr><tr><td>AT_MOST</td><td>10</td><td>000000000000000000001111011000</td></tr></tbody></table><pre><code>UNSPECIFIED: 不确定, 父控件不会对子控件有任何约束, 只要小于手机屏幕宽和高;EXACTLY: 父容器会对子视图确定一个大小, 无论子视图有多大, 都必须限定在父容器给定的范围内;AT_MOST : 父容器为所有子视图指定一个最大的尺寸, 子视图所有的大小都必须在这个范围内;</code></pre><h3 id="2-3-measure-重要的回调方法"><a href="#2-3-measure-重要的回调方法" class="headerlink" title="2.3 measure 重要的回调方法:"></a>2.3 measure 重要的回调方法:</h3><p>measure(): 调用onMeasure();<br>树遍历所有子结点;</p><p>onMeasure(): 将所有测量的规格传递给setMeasuredDimension();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line"><span class="comment">// setMeasuredDimension是用来通知测量结束的, 必须调用</span></span><br><span class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setMeasuredDimension(): 完成整个测测量过程;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method must be called by &#123;<span class="doctag">@link</span> #onMeasure(int, int)&#125; to store the</span></span><br><span class="line"><span class="comment">     * measured width and measured height. Failing to do so will trigger an</span></span><br><span class="line"><span class="comment">     * exception at measurement time.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> measuredWidth The measured width of this view.  May be a complex</span></span><br><span class="line"><span class="comment">     * bit mask as defined by &#123;<span class="doctag">@link</span> #MEASURED_SIZE_MASK&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> measuredHeight The measured height of this view.  May be a complex</span></span><br><span class="line"><span class="comment">     * bit mask as defined by &#123;<span class="doctag">@link</span> #MEASURED_SIZE_MASK&#125; and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #MEASURED_STATE_TOO_SMALL&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setMeasuredDimension</span><span class="params">(<span class="keyword">int</span> measuredWidth, <span class="keyword">int</span> measuredHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> optical = isLayoutModeOptical(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (optical != isLayoutModeOptical(mParent)) &#123;</span><br><span class="line">            Insets insets = getOpticalInsets();</span><br><span class="line">            <span class="keyword">int</span> opticalWidth  = insets.left + insets.right;</span><br><span class="line">            <span class="keyword">int</span> opticalHeight = insets.top  + insets.bottom;</span><br><span class="line"></span><br><span class="line">            measuredWidth  += optical ? opticalWidth  : -opticalWidth;</span><br><span class="line">            measuredHeight += optical ? opticalHeight : -opticalHeight;</span><br><span class="line">        &#125;</span><br><span class="line">        setMeasuredDimensionRaw(measuredWidth, measuredHeight);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注: 如果父视图发现子视图传递的大小可能不对时候, 会再次请求子视图进行测量, 如果给定的数值超过了规定大小或者太小, 父视图会赋值给AT_MOST 或者 EXACTLY的形式,再次对子视图进行测量</p></blockquote><h2 id="3-layout"><a href="#3-layout" class="headerlink" title="3. layout"></a>3. layout</h2><p>会根据测量所得到的尺寸来确定layout摆放的位置, 子视图的具体位置是相对于父视图而言的, 必须实现onLayout(), 重新摆放;</p><p>layout(): 调用onLayout();</p><p>onLayout(): 一定要实现;<br>可以去分析LinearLayout中的实现;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Called from layout when this view should</span></span><br><span class="line"><span class="comment">    * assign a size and position to each of its children.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Derived classes with children should override</span></span><br><span class="line"><span class="comment">    * this method and call layout on each of</span></span><br><span class="line"><span class="comment">    * their children.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> changed This is a new size or position for this view</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> left Left position, relative to parent</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> top Top position, relative to parent</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> right Right position, relative to parent</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bottom Bottom position, relative to parent</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>是一个树形结构, 依次从ViewGroup进行位置摆放</p><h2 id="4-draw"><a href="#4-draw" class="headerlink" title="4. draw"></a>4. draw</h2><p>两个比较容易混淆的回调方法:</p><h3 id="4-1-invalidate-请求安卓系统"><a href="#4-1-invalidate-请求安卓系统" class="headerlink" title="4.1 invalidate(): 请求安卓系统;"></a>4.1 invalidate(): 请求安卓系统;</h3><pre><code>如果视图大小没有发生变化, 则不会调用layout放置过程;</code></pre><h3 id="4-2-requestLayout-当布局方向变化-尺寸变化就回去调用"><a href="#4-2-requestLayout-当布局方向变化-尺寸变化就回去调用" class="headerlink" title="4.2 requestLayout(): 当布局方向变化, 尺寸变化就回去调用;"></a>4.2 requestLayout(): 当布局方向变化, 尺寸变化就回去调用;</h3><pre><code>会触发measure, layout过程, 但不会调用draw方法</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;View的绘制机制&quot;&gt;&lt;a href=&quot;#View的绘制机制&quot; class=&quot;headerlink&quot; title=&quot;View的绘制机制&quot;&gt;&lt;/a&gt;View的绘制机制&lt;/h1&gt;&lt;h2 id=&quot;1-view树的绘制流程&quot;&gt;&lt;a href=&quot;#1-view树的绘制流程&quot;
      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="View" scheme="https://arnoforst.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>广播</title>
    <link href="https://arnoforst.github.io/2017/11/09/%E5%B9%BF%E6%92%AD/"/>
    <id>https://arnoforst.github.io/2017/11/09/广播/</id>
    <published>2017-11-09T03:25:11.000Z</published>
    <updated>2019-06-27T06:22:14.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-广播"><a href="#1-广播" class="headerlink" title="1. 广播"></a>1. 广播</h2><h3 id="1-1-广播定义"><a href="#1-1-广播定义" class="headerlink" title="1.1 广播定义"></a>1.1 广播定义</h3><p>(类似观察者模式)<br>在Android中，Broadcast是一种广泛运用的在应用程序之间的传输信息的机制， Android中我们要发送的广播内容是一个Intent，这个Itent中可以携带我们要传送的数据。</p><p>*1. 广播实现的不同程序间的数据传输与共享（只要和发送广播的Action相同的接收者都可以接收到）<br>*2. 广播接收者通知作用（在程序中通过广播接收者来更新UI，避免了Service与Activity进行交互）</p><h3 id="1-2-广播场景"><a href="#1-2-广播场景" class="headerlink" title="1.2 广播场景"></a>1.2 广播场景</h3><p>A. 同一App内具有多个进程的不同组件之间的消息通信<br>B. 不同App间的组件之间消息通信(推广运营)</p><h3 id="1-3-广播种类"><a href="#1-3-广播种类" class="headerlink" title="1.3 广播种类"></a>1.3 广播种类</h3><ol><li>Nromal Broadcast : Context.sendBroadcast(普通广播)</li><li>System Broadcast: Context.sendOrderedBroadcast(有序广播\系统广播)</li><li>Local  Broadcast: 只在自身App内传播(本地广播)</li></ol><h2 id="2-实现广播-receiver-接收Broadcast"><a href="#2-实现广播-receiver-接收Broadcast" class="headerlink" title="2. 实现广播-receiver(接收Broadcast)"></a>2. 实现广播-receiver(接收Broadcast)</h2><p>1.静态注册: 注册完成就一直运行(Manifest文件中,Activity销毁仍能接收广播,缺点:不灵活)<br>2. 动态注册,跟随Activity的生命周期(onDestroy中要销毁,跟随Activity)</p><p>区别: 动态在代码中调用 registerReceiver<br>        静态在Manifest里写入</p><p>| 实现方式/区别 | 声明| 生命周期|<br>|—|—|—|—|—|—|<br>| 动态注册| registerReceiver| 跟随Activity|<br>| 静态注册| Manifest| 被销毁了仍能运行接收|</p><h2 id="3-广播实现机制"><a href="#3-广播实现机制" class="headerlink" title="3. 广播实现机制"></a>3. 广播实现机制</h2><h3 id="3-1-自定义广播接收者BroadcastReceiver-并复写onReceive-方法"><a href="#3-1-自定义广播接收者BroadcastReceiver-并复写onReceive-方法" class="headerlink" title="3.1  自定义广播接收者BroadcastReceiver,并复写onReceive()方法;"></a>3.1  自定义广播接收者BroadcastReceiver,并复写onReceive()方法;</h3><h3 id="3-2-通过Binder机制想-AMS-Activity-Manager-Service-进行注册"><a href="#3-2-通过Binder机制想-AMS-Activity-Manager-Service-进行注册" class="headerlink" title="3.2. 通过Binder机制想*AMS(Activity Manager Service) 进行注册;"></a>3.2. 通过Binder机制想*AMS(Activity Manager Service) 进行注册;</h3><h3 id="3-3-广播发送这通过Binder机制向AMS发送广播"><a href="#3-3-广播发送这通过Binder机制向AMS发送广播" class="headerlink" title="3.3  广播发送这通过Binder机制向AMS发送广播;"></a>3.3  广播发送这通过Binder机制向AMS发送广播;</h3><h3 id="3-4-AMS查找符合相应条件-IntentFilter-Permission等-的BroadcastReceiver-将广播发送到BroadcastReceiver-一般情况下是Activity-相应的消息循环队列中"><a href="#3-4-AMS查找符合相应条件-IntentFilter-Permission等-的BroadcastReceiver-将广播发送到BroadcastReceiver-一般情况下是Activity-相应的消息循环队列中" class="headerlink" title="3.4  AMS查找符合相应条件(IntentFilter/Permission等) 的BroadcastReceiver, 将广播发送到BroadcastReceiver(一般情况下是Activity) 相应的消息循环队列中;"></a>3.4  AMS查找符合相应条件(IntentFilter/Permission等) 的BroadcastReceiver, 将广播发送到BroadcastReceiver(一般情况下是Activity) 相应的消息循环队列中;</h3><h3 id="3-5-消息循环执行拿到此广播-回调BroadcastReceiver中的onReceive-方法"><a href="#3-5-消息循环执行拿到此广播-回调BroadcastReceiver中的onReceive-方法" class="headerlink" title="3.5  消息循环执行拿到此广播, 回调BroadcastReceiver中的onReceive()方法;"></a>3.5  消息循环执行拿到此广播, 回调BroadcastReceiver中的onReceive()方法;</h3><blockquote><p>*AMS:AMS是作为管理Android系统组件的核心服务，他在SystemServer执行run()方法的时候被创建，并运行在独立的进程中。具体来说就是SystemServer管理着Android中所有的系统服务，这些系统服务的生命周期回调都由SystemServer去调度负责。</p></blockquote><h2 id="4-LoacalBroadcastManager详解"><a href="#4-LoacalBroadcastManager详解" class="headerlink" title="4. LoacalBroadcastManager详解"></a>4. LoacalBroadcastManager详解</h2><h3 id="4-1-使用它发送的广播将只在自身内传播-不必担心泄露隐私数据"><a href="#4-1-使用它发送的广播将只在自身内传播-不必担心泄露隐私数据" class="headerlink" title="4.1 使用它发送的广播将只在自身内传播, 不必担心泄露隐私数据;"></a>4.1 使用它发送的广播将只在自身内传播, 不必担心泄露隐私数据;</h3><h3 id="4-2-其他App无法对你的App发送该广播"><a href="#4-2-其他App无法对你的App发送该广播" class="headerlink" title="4.2 其他App无法对你的App发送该广播"></a>4.2 其他App无法对你的App发送该广播</h3><p> 因为你的App根本不可能收到其他非自身应用发送的广播, 避免了安全漏洞的利用;(防止其他人获取到action 并篡改, 如植入广告等)</p><h3 id="4-3-比系统全局广播更高效"><a href="#4-3-比系统全局广播更高效" class="headerlink" title="4.3 比系统全局广播更高效;"></a>4.3 比系统全局广播更高效;</h3><p>在LocalBroadcastReceiver中三个集合类:</p><h4 id="4-3-1-mReceivers"><a href="#4-3-1-mReceivers" class="headerlink" title="4.3.1 mReceivers:"></a>4.3.1 mReceivers:</h4><p>是一个HashMap,key是receiver , value是intentfilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;BroadcastReceiver, ArrayList&lt;IntentFilter&gt;&gt; mReceivers</span><br></pre></td></tr></table></figure><h4 id="4-3-2-mActions"><a href="#4-3-2-mActions" class="headerlink" title="4.3.2 mActions:"></a>4.3.2 mActions:</h4><p>key是Action, value 是arrylist ,是对应的receiverRecord</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ArrayList&lt;ReceiverRecord&gt;&gt; mActions</span><br></pre></td></tr></table></figure><h4 id="4-3-3-mPendingBroadcasts"><a href="#4-3-3-mPendingBroadcasts" class="headerlink" title="4.3.3 mPendingBroadcasts:"></a>4.3.3 mPendingBroadcasts:</h4><p>存储BroadcastRecord对象的(intent和receivers) 作用:存储和发送广播的action匹配的ReceiverRecord的集合,在执行时会遍历的集合里面广播接收器(存储了广播接收器的存储器)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;BroadcastRecord&gt; mPendingBroadcasts</span><br><span class="line">            = <span class="keyword">new</span> ArrayList&lt;BroadcastRecord&gt;();</span><br></pre></td></tr></table></figure><h4 id="4-3-4-注册方法-registerReceiver"><a href="#4-3-4-注册方法-registerReceiver" class="headerlink" title="4.3.4 注册方法:registerReceiver"></a>4.3.4 注册方法:registerReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register a receive for any local broadcasts that match the given IntentFilter.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiver The BroadcastReceiver to handle the broadcast.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filter Selects the Intent broadcasts to be received.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #unregisterReceiver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">            ReceiverRecord entry = <span class="keyword">new</span> ReceiverRecord(filter, receiver);</span><br><span class="line">            ArrayList&lt;IntentFilter&gt; filters = mReceivers.get(receiver);</span><br><span class="line">            <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</span><br><span class="line">                filters = <span class="keyword">new</span> ArrayList&lt;IntentFilter&gt;(<span class="number">1</span>);</span><br><span class="line">                mReceivers.put(receiver, filters);</span><br><span class="line">            &#125;</span><br><span class="line">            filters.add(filter); <span class="comment">//添加过滤规则</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;filter.countActions(); i++) &#123;</span><br><span class="line">                String action = filter.getAction(i);</span><br><span class="line">                ArrayList&lt;ReceiverRecord&gt; entries = mActions.get(action);</span><br><span class="line">                <span class="keyword">if</span> (entries == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    entries = <span class="keyword">new</span> ArrayList&lt;ReceiverRecord&gt;(<span class="number">1</span>);</span><br><span class="line">                    mActions.put(action, entries);</span><br><span class="line">                &#125;</span><br><span class="line">                entries.add(entry);<span class="comment">//将里面的Filter分别建立了Arraylist映射,通过广播接收器来接收</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-5-unregisterReceiver"><a href="#4-3-5-unregisterReceiver" class="headerlink" title="4.3.5 unregisterReceiver:"></a>4.3.5 unregisterReceiver:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unregister a previously registered BroadcastReceiver.  &lt;em&gt;All&lt;/em&gt;</span></span><br><span class="line"><span class="comment">     * filters that have been registered for this BroadcastReceiver will be</span></span><br><span class="line"><span class="comment">     * removed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> receiver The BroadcastReceiver to unregister.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #registerReceiver</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterReceiver</span><span class="params">(BroadcastReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">            ArrayList&lt;IntentFilter&gt; filters = mReceivers.remove(receiver);</span><br><span class="line">            <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;filters.size(); i++) &#123;</span><br><span class="line">                IntentFilter filter = filters.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;filter.countActions(); j++) &#123;</span><br><span class="line">                    String action = filter.getAction(j);</span><br><span class="line">                    ArrayList&lt;ReceiverRecord&gt; receivers = mActions.get(action);</span><br><span class="line">                    <span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;receivers.size(); k++) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (receivers.get(k).receiver == receiver) &#123;</span><br><span class="line">                                receivers.remove(k);<span class="comment">//将myreceiver中的广播接收器删除</span></span><br><span class="line">                                k--;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (receivers.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            mActions.remove(action);<span class="comment">//把mActions中集合类删除</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-6-sendBroadcast"><a href="#4-3-6-sendBroadcast" class="headerlink" title="4.3.6 sendBroadcast:"></a>4.3.6 sendBroadcast:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;receivers.size(); i++) &#123;</span><br><span class="line">                        receivers.get(i).broadcasting = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mPendingBroadcasts.add(<span class="keyword">new</span> BroadcastRecord(intent, receivers));<span class="comment">//过滤之后的广播记录</span></span><br><span class="line">                    <span class="keyword">if</span> (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) &#123;<span class="comment">//判断是否有消息</span></span><br><span class="line">                        mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-LocalBroadcastMananger-高效的原因"><a href="#4-4-LocalBroadcastMananger-高效的原因" class="headerlink" title="4.4 LocalBroadcastMananger 高效的原因"></a>4.4 LocalBroadcastMananger 高效的原因</h3><h4 id="4-4-1-内部通过HandlersendBroadcast-方法"><a href="#4-4-1-内部通过HandlersendBroadcast-方法" class="headerlink" title="4.4.1 内部通过HandlersendBroadcast()方法"></a>4.4.1 内部通过HandlersendBroadcast()方法</h4><p>主要是它内部通过HandlersendBroadcast()方法含义并非平时所用,它的sendBroadcast()方法其实是通过handler发送一个Message实现的;</p><h4 id="4-3-2-内部通过Handler来实现广播发送"><a href="#4-3-2-内部通过Handler来实现广播发送" class="headerlink" title="4.3.2 内部通过Handler来实现广播发送"></a>4.3.2 内部通过Handler来实现广播发送</h4><p>既然是它内部通过Handler来实现广播发送的,那么相比系统广播通过Binder实现肯定高效,同事用Handler来实现,别的应用无法像我们的应用发送该广播,而我们的应用内发送的广播也不会离开我们的应用;</p><h4 id="4-3-3-LocalBroadcastMananger-内部协作"><a href="#4-3-3-LocalBroadcastMananger-内部协作" class="headerlink" title="4.3.3 LocalBroadcastMananger 内部协作"></a>4.3.3 LocalBroadcastMananger 内部协作</h4><p>主要是靠这两个集合:mReceivers和mActions, 还有一个List集合mPedingBroadcasts,  这个主要就是存储待接收的广播对象;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-广播&quot;&gt;&lt;a href=&quot;#1-广播&quot; class=&quot;headerlink&quot; title=&quot;1. 广播&quot;&gt;&lt;/a&gt;1. 广播&lt;/h2&gt;&lt;h3 id=&quot;1-1-广播定义&quot;&gt;&lt;a href=&quot;#1-1-广播定义&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="Andorid基础" scheme="https://arnoforst.github.io/tags/Andorid%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HandlerThread</title>
    <link href="https://arnoforst.github.io/2017/11/08/HandlerThread/"/>
    <id>https://arnoforst.github.io/2017/11/08/HandlerThread/</id>
    <published>2017-11-08T04:33:59.000Z</published>
    <updated>2019-06-27T06:21:02.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h1><h2 id="1-Handler是什么"><a href="#1-Handler是什么" class="headerlink" title="1.Handler是什么?"></a>1.Handler是什么?</h2><h3 id="1-1-handlerThread产生背景"><a href="#1-1-handlerThread产生背景" class="headerlink" title="1.1 handlerThread产生背景"></a>1.1 handlerThread产生背景</h3><p>开启Thread子线程进行耗时操作</p><p>多次创建和销毁线程是很消耗系统资源的</p><p>(通过阻塞等待)</p><blockquote><p>handler + thread + looper</p></blockquote><p>一个内部有looper的thread </p><p>(普通handler如果创建在子线程, 由于handler消息处理需要一个messagequeen的looper, 但默认创建子线程时候没有looper就会发生异常报错;<br>如果想在子线程中创建一个handler就必须手动初始化looper,调用looper.loop()方法开启循环)</p><h3 id="1-2-handlerThread-的特点"><a href="#1-2-handlerThread-的特点" class="headerlink" title="1.2 handlerThread 的特点"></a>1.2 handlerThread 的特点</h3><ul><li>HandlerThread 本质上是一个线程类, 它继承了Thread;</li><li>HandlerThread 有自己的内部Looper对象, 可以进行looper循环;</li><li>通过获取HandlerThread的looper对象传递给Handler对象,可以在handleMessage()方法中执行异步任务;</li><li>有点是不会有阻塞, 减少了对性能的消耗;</li><li>缺点是不能同时进行多任务的处理, 需要等待进行处理, 处理效率较低;</li><li>与线程池注重并发不同, HandlerThread是一个串行队列, HandlerThread背后只有一个线程;</li></ul><h2 id="2-HandlerThread源码解析"><a href="#2-HandlerThread源码解析" class="headerlink" title="2. HandlerThread源码解析"></a>2. HandlerThread源码解析</h2><h3 id="2-1-构造方法"><a href="#2-1-构造方法" class="headerlink" title="2.1  构造方法"></a>2.1  构造方法</h3><p>构造方法里可设置名称和优先级;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a HandlerThread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> priority The priority to run the thread at. The value supplied must be from </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.os.Process&#125; and not from java.lang.Thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    mPriority = priority;<span class="comment">//设置优先级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-onLooperPrepared-空方法"><a href="#2-2-onLooperPrepared-空方法" class="headerlink" title="2.2 onLooperPrepared()空方法"></a>2.2 onLooperPrepared()空方法</h3><p>可以在需要的时候去复写它, 它执行在loop之前;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Call back method that can be explicitly overridden if needed to execute some</span></span><br><span class="line"><span class="comment">    * setup before Looper loops.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-run-方法"><a href="#2-3-run-方法" class="headerlink" title="2. 3 run()方法;"></a>2. 3 run()方法;</h3><p>synchronized: 当有两个并发线程访问同一个对象, 一个时间内只能有一个线程得到执行;<br>而另一个线程也要执行, 就必须等待另一个线程也执行完;(这里通知的是getLooper()中的wait())</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();<span class="comment">//  初始化looper</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;<span class="comment">// 保证线程间数据安全</span></span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();<span class="comment">// 通知当前等待的线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);<span class="comment">// 给线程设定优先级(可以解决内存泄露*1)</span></span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();<span class="comment">// 开启循环</span></span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-getLooper"><a href="#2-4-getLooper" class="headerlink" title="2.4 getLooper():"></a>2.4 getLooper():</h3><p>在获取mylooper时候存在一个同步问题, 只有当上面线程创建成功, looper对象也创建成功时, 才会通知下面的;wait();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method returns the Looper associated with this thread. If this thread not been started</span></span><br><span class="line"><span class="comment">     * or for any reason isAlive() returns false, this method will return null. If this thread</span></span><br><span class="line"><span class="comment">     * has been started, this method will block until the looper has been initialized.  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123; <span class="comment">// 如果looper没创建成功则一直阻塞</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();<span class="comment">// 被run()方法中的notifyAll()通知</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mLooper;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-quit"><a href="#2-5-quit" class="headerlink" title="2.5 quit():"></a>2.5 quit():</h3><p>退出消息循环, 退出线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Quits the handler thread's looper.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Causes the handler thread's looper to terminate without processing any</span></span><br><span class="line"><span class="comment">    * more messages in the message queue.</span></span><br><span class="line"><span class="comment">    * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Any attempt to post messages to the queue after the looper is asked to quit will fail.</span></span><br><span class="line"><span class="comment">    * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</span></span><br><span class="line"><span class="comment">    * &lt;/p&gt;&lt;p class="note"&gt;</span></span><br><span class="line"><span class="comment">    * Using this method may be unsafe because some messages may not be delivered</span></span><br><span class="line"><span class="comment">    * before the looper terminates.  Consider using &#123;<span class="doctag">@link</span> #quitSafely&#125; instead to ensure</span></span><br><span class="line"><span class="comment">    * that all pending work is completed in an orderly manner.</span></span><br><span class="line"><span class="comment">    * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</span></span><br><span class="line"><span class="comment">    * thread had not yet started running.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #quitSafely</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Looper looper = getLooper();</span><br><span class="line">       <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">           looper.quit();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-quitSafely"><a href="#2-6-quitSafely" class="headerlink" title="2.6 quitSafely():"></a>2.6 quitSafely():</h3><p>退出消息循环, 退出线程(效率上不是很高, 但更安全)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Quits the handler thread's looper safely.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Causes the handler thread's looper to terminate as soon as all remaining messages</span></span><br><span class="line"><span class="comment">    * in the message queue that are already due to be delivered have been handled.</span></span><br><span class="line"><span class="comment">    * Pending delayed messages with due times in the future will not be delivered.</span></span><br><span class="line"><span class="comment">    * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Any attempt to post messages to the queue after the looper is asked to quit will fail.</span></span><br><span class="line"><span class="comment">    * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</span></span><br><span class="line"><span class="comment">    * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">    * If the thread has not been started or has finished (that is if</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #getLooper&#125; returns null), then false is returned.</span></span><br><span class="line"><span class="comment">    * Otherwise the looper is asked to quit and true is returned.</span></span><br><span class="line"><span class="comment">    * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> True if the looper looper has been asked to quit or false if the</span></span><br><span class="line"><span class="comment">    * thread had not yet started running.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Looper looper = getLooper();</span><br><span class="line">       <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">           looper.quitSafely();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HandlerThread&quot;&gt;&lt;a href=&quot;#HandlerThread&quot; class=&quot;headerlink&quot; title=&quot;HandlerThread&quot;&gt;&lt;/a&gt;HandlerThread&lt;/h1&gt;&lt;h2 id=&quot;1-Handler是什么&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="异步消息" scheme="https://arnoforst.github.io/tags/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>IntentService</title>
    <link href="https://arnoforst.github.io/2017/11/07/IntentService/"/>
    <id>https://arnoforst.github.io/2017/11/07/IntentService/</id>
    <published>2017-11-07T04:34:52.000Z</published>
    <updated>2019-06-27T06:15:03.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h1><h1 id="1-IntentService是什么"><a href="#1-IntentService是什么" class="headerlink" title="1. IntentService是什么"></a>1. IntentService是什么</h1><h2 id="1-1-特殊的Service"><a href="#1-1-特殊的Service" class="headerlink" title="1.1 特殊的Service"></a>1.1 特殊的Service</h2><p>//继承了Service,可以执行<strong>高优先级</strong>的任务, 封装了HandlerThread和Handler</p><ul><li>本质上是一种特殊的Service, 继承自Service并且本身就是一个抽象类</li><li>它的内部通过HandlerThread 和 Handler 实现异步操作</li></ul><blockquote><p>是继承并处理<strong>异步同步请求</strong>的一个类, 在IntentService内有一个工作线程来处理耗时操作, 启动IntentService的方式和启动传统的Service一样, 同时, 当任务执行完后, IntentService 会自动停止, 而不需要我们手动去控制stopSelf(), 另外, 可以启动IntentService多次, 而每一个耗时操作都会以工作队列的方式在IntentService的onHandlerIntent回调方法中执行, 并且 , 每次只会执行一个工作线程, 执行完第一个再执行第二个;(<strong>串行</strong>)</p></blockquote><h2 id="2-IntentService使用方法"><a href="#2-IntentService使用方法" class="headerlink" title="2. IntentService使用方法"></a>2. IntentService使用方法</h2><h3 id="2-1-必须实现两个方法"><a href="#2-1-必须实现两个方法" class="headerlink" title="2.1 必须实现两个方法"></a>2.1 必须实现两个方法</h3><p>(创建IntentService时, 只需要实现onHandleIntent和构造方法, onHandleIntent为异步方法, 可以执行耗时操作)</p><p>写一个类继承IntentService</p><p>构造方法: 传入线程名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IntentService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    mName = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onHandleIntent()</code>: 进行Itent的耗时操作 后intent里携带信息, 并startService(intent),<br>最后MyIntentService.setUpdate(this);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WorkerThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span></span></span><br></pre></td></tr></table></figure><h2 id="3-IntentService源码解析"><a href="#3-IntentService源码解析" class="headerlink" title="3. IntentService源码解析"></a>3. IntentService源码解析</h2><h3 id="3-1-onCreate"><a href="#3-1-onCreate" class="headerlink" title="3.1 onCreate()"></a>3.1 onCreate()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> It would be nice to have an option to hold a partial wakelock</span></span><br><span class="line">        <span class="comment">// during processing, and to have a static startService(Context, Intent)</span></span><br><span class="line">        <span class="comment">// method that would launch the service &amp; hand off a wakelock.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);<span class="comment">// 创建了HandlerThread来进行异步消息传递</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        mServiceLooper = thread.getLooper();<span class="comment">// 传递的是HandlerThread的loop对象;</span></span><br><span class="line"><span class="comment">// (由于looper 对象和 HandlerThread绑定,而HandlerThread又是一个异步线程,把HandlerThread 持有的 looper 传递给 ServiceHandler</span></span><br><span class="line">这样ServiceHandler就变成了处理异步线程的执行类)</span><br><span class="line">        mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);<span class="comment">// 一个继承了Handler的Handler</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>intentService启动后还会调用onStartCommand();</p><h3 id="3-2-onStartCommand"><a href="#3-2-onStartCommand" class="headerlink" title="3.2 onStartCommand():"></a>3.2 onStartCommand():</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * You should not override this method for your IntentService. Instead,</span></span><br><span class="line"><span class="comment">     * override &#123;<span class="doctag">@link</span> #onHandleIntent&#125;, which the system calls when the IntentService</span></span><br><span class="line"><span class="comment">     * receives a start request.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> android.app.Service#onStartCommand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        onStart(intent, startId);<span class="comment">//实际操作都在onStart</span></span><br><span class="line">        <span class="keyword">return</span> mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-onStart"><a href="#3-4-onStart" class="headerlink" title="3.4 onStart():"></a>3.4 onStart():</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">        msg.arg1 = startId;</span><br><span class="line">        msg.obj = intent;</span><br><span class="line">        mServiceHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-ServiceHandler类"><a href="#3-5-ServiceHandler类" class="headerlink" title="3.5 ServiceHandler类:"></a>3.5 ServiceHandler类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            onHandleIntent((Intent)msg.obj);</span><br><span class="line">            stopSelf(msg.arg1);<span class="comment">// 如果没有参数会立即停止, 如果有参数会等待所有消息都处理完之后才会终止任务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">```java</span><br><span class="line">onHandleIntent: 是一个抽象方法, 在创建IntentService时一定要实现该方法(异步方法)</span><br><span class="line">如果执行完会立刻销毁, 当有多个服务时会明确到执行完最后一个服务才会销毁;</span><br><span class="line">stopSelf加参数;</span><br><span class="line"></span><br><span class="line">**(Service里不能做耗时操作, 而IntentService可以执行耗时操作)**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked on the worker thread with a request to process.</span></span><br><span class="line"><span class="comment">     * Only one Intent is processed at a time, but the processing happens on a</span></span><br><span class="line"><span class="comment">     * worker thread that runs independently from other application logic.</span></span><br><span class="line"><span class="comment">     * So, if this code takes a long time, it will hold up other requests to</span></span><br><span class="line"><span class="comment">     * the same IntentService, but it will not hold up anything else.</span></span><br><span class="line"><span class="comment">     * When all requests have been handled, the IntentService stops itself,</span></span><br><span class="line"><span class="comment">     * so you should not call &#123;<span class="doctag">@link</span> #stopSelf&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intent The value passed to &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *               android.content.Context#startService(Intent)&#125;.</span></span><br><span class="line"><span class="comment">     *               This may be null if the service is being restarted after</span></span><br><span class="line"><span class="comment">     *               its process has gone away; see</span></span><br><span class="line"><span class="comment">     *               &#123;<span class="doctag">@link</span> android.app.Service#onStartCommand&#125;</span></span><br><span class="line"><span class="comment">     *               for details.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(@Nullable Intent intent)</span></span>;</span><br></pre></td></tr></table></figure><p>本质上就是一个封装了HandlerThread 和 handler的异步框架</p><p>每次去实现时一定实现onHandleIntent()在里面进行耗时操作, 会按照顺序执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IntentService&quot;&gt;&lt;a href=&quot;#IntentService&quot; class=&quot;headerlink&quot; title=&quot;IntentService&quot;&gt;&lt;/a&gt;IntentService&lt;/h1&gt;&lt;h1 id=&quot;1-IntentService是什么&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="异步消息" scheme="https://arnoforst.github.io/tags/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>AsyncTask</title>
    <link href="https://arnoforst.github.io/2017/11/07/AsyncTask/"/>
    <id>https://arnoforst.github.io/2017/11/07/AsyncTask/</id>
    <published>2017-11-07T04:32:52.000Z</published>
    <updated>2019-06-27T06:21:02.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h1><h2 id="1-什么是-AsyncTask"><a href="#1-什么是-AsyncTask" class="headerlink" title="1. 什么是 AsyncTask"></a>1. 什么是 AsyncTask</h2><h3 id="1-1-AsyncTask-是安卓提供的轻量异步类-抽象-可以继承AsyncTask-在类中可以进行异步操作-并提供接口反馈当前异步执行的程度或进度。"><a href="#1-1-AsyncTask-是安卓提供的轻量异步类-抽象-可以继承AsyncTask-在类中可以进行异步操作-并提供接口反馈当前异步执行的程度或进度。" class="headerlink" title="1.1 AsyncTask 是安卓提供的轻量异步类(抽象), 可以继承AsyncTask,在类中可以进行异步操作, 并提供接口反馈当前异步执行的程度或进度。"></a>1.1 AsyncTask 是安卓提供的轻量异步类(抽象), 可以继承AsyncTask,在类中可以进行异步操作, 并提供接口反馈当前异步执行的程度或进度。</h3><blockquote><p>本质上就是一个封装了线程池和handler的异步框架,主要用来执行异步任务,由于集成了handler,通过handler发送消息,它很方便的在工作线程和UI线程之间切换<br>(最好做耗时比较短的,长的还是用线程池)</p></blockquote><h2 id="2-AsyncTask的使用方法"><a href="#2-AsyncTask的使用方法" class="headerlink" title="2. AsyncTask的使用方法"></a>2. AsyncTask的使用方法</h2><p>2.1 三个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG_TAG = <span class="string">"AsyncTask"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="comment">// We want at least 2 threads and at most 4 threads in the core pool, // preferring to have 1 less than the CPU count to avoid saturating // the CPU with background work  private static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Params:执行时传入的参数;<br>Progress:在后台执行时的进度;<br>Result:当任务执行完毕后的结果返回;</p><hr><p>2.2 五个方法</p><p>耗时操作没进行前,在UI线程汇中调用onPreExecute();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后台执行时调用doInBackground();计算结果必须有一个返回,并会被传到onPost()中;<br>也可以调用publishProgress();返回进度显示<br>    @WorkerThread<br>    protected abstract Result doInBackground(Params… params);<br>在每次onProgressUpdate()调用完后会执行onProgressUpdate();通过progressbar.setProgress(value)动态显示进度条;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后所有doInBackground之后会通过result来传递给onPostExecute()并调用;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-AsyncTask内部原理"><a href="#3-AsyncTask内部原理" class="headerlink" title="3. AsyncTask内部原理"></a>3. AsyncTask内部原理</h2><p>3.1 AsyncTask的本质是一个静态的线程池,AsyncTask派生出的子类可以实现不同的异步任务, 这些任务都是提交到静态的线程池中执行;</p><p>3.2 线程池中的工作线程执行doInBackground(mParans)方法执行异步任务;</p><p>3.3 当任务状态改变之后,工作线程会向UI线程发送消息,AsyncTask内部的InternalHandler响应这些消息, 并调用相关的回调函数;</p><h2 id="4-AsyncTask注意事项"><a href="#4-AsyncTask注意事项" class="headerlink" title="4. AsyncTask注意事项"></a>4. AsyncTask注意事项</h2><p>4.1 内存泄露 </p><p>被声明为Activity的非静态的内部类,会持有外部类的引用;</p><blockquote><p>设为静态 static;<br>或者持有弱引用;<br>或在外部onDestroy里用cancle;</p></blockquote><p>4.2 生命周期<br>必须在activity生命周期销毁时销毁AsyncTask</p><p>4.3 结果丢失原因</p><p>如被杀掉,或者屏幕旋转时onPostExcute不会更新界面</p><p>4.4 并行OR串行</p><table><thead><tr><th>版本</th><th>执行方式</th></tr></thead><tbody><tr><td>&lt;= 1.6</td><td>串行</td></tr><tr><td>&gt;= 1.6 &amp;&amp; &lt; 2.3</td><td>并行</td></tr><tr><td>&gt;= 2.3</td><td>串行</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AsyncTask&quot;&gt;&lt;a href=&quot;#AsyncTask&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask&quot;&gt;&lt;/a&gt;AsyncTask&lt;/h1&gt;&lt;h2 id=&quot;1-什么是-AsyncTask&quot;&gt;&lt;a href=&quot;#1-什么是-Asyn
      
    
    </summary>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="异步消息" scheme="https://arnoforst.github.io/tags/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>百度地图集成的小问题</title>
    <link href="https://arnoforst.github.io/2017/10/27/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E9%9B%86%E6%88%90%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://arnoforst.github.io/2017/10/27/百度地图集成的小问题/</id>
    <published>2017-10-27T03:17:24.000Z</published>
    <updated>2019-06-27T06:21:02.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模拟器运行时候JS不加载或白屏"><a href="#模拟器运行时候JS不加载或白屏" class="headerlink" title="模拟器运行时候JS不加载或白屏"></a>模拟器运行时候JS不加载或白屏</h2><hr><p>之前用百度地图的时候都是直接Copy过来其他项目的地方，因为好业务逻辑相同，也简单了不少。但是偶然在运行中发现了这样一个问题。我用的是SDK 25（7.1）的模拟器，在我点击跳转到页面的时候显示了空白，同时我的日志输出了这样一段：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromium: [ERROR:interface_registry.cc(104)] Failed to locate a binder for interface: autofill::mojom::PasswordManagerDriver</span><br></pre></td></tr></table></figure><p>上网查阅资料里好多人说的是权限没获取到，又或是服务器资源不好。但这个页面短暂空白后，又出现了地图列表，看起来似乎是JS没有加载。可是我的代码里已经有了这些东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>);</span><br><span class="line">webView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line">webView.getSettings().setLoadsImagesAutomatically(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>这个时候还是Stack Overflow上能看出些门道， 同时我注意到还有另外一条信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unrecognized GLES max version string in extensions: ANDROID_EMU_CHECKSUM_HELPER_v1 ANDROID_EMU_dma_v1</span><br></pre></td></tr></table></figure><p>由于是使用虚拟机，我意识到可能还有显示渲染的不兼容。</p><p>然后我试着找了一个x86版本的虚拟机安装上去，画面又显示回来了。</p><p>目前在Stack Overflow上没有找到什么能解决的办法。</p><h2 id="无法在AndroidManifest-xml中获取com-baidu-android-lbs-API-KEY的值"><a href="#无法在AndroidManifest-xml中获取com-baidu-android-lbs-API-KEY的值" class="headerlink" title="无法在AndroidManifest.xml中获取com.baidu.android.lbs.API_KEY的值"></a>无法在AndroidManifest.xml中获取com.baidu.android.lbs.API_KEY的值</h2><hr><p>按照文档上的说明，我在AndroidManifest文件中配置meta-data应该是可以的，但是读取不到，后来发现原来key 不应该是api_key而是com.baidu.lbsapi.API_KEY，这个问题还是要细心注意一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模拟器运行时候JS不加载或白屏&quot;&gt;&lt;a href=&quot;#模拟器运行时候JS不加载或白屏&quot; class=&quot;headerlink&quot; title=&quot;模拟器运行时候JS不加载或白屏&quot;&gt;&lt;/a&gt;模拟器运行时候JS不加载或白屏&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;之前用百度地图的时候都是直
      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="三方集成" scheme="https://arnoforst.github.io/tags/%E4%B8%89%E6%96%B9%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio 工程jar包重复引入报错</title>
    <link href="https://arnoforst.github.io/2017/10/27/AndroidStudio%20%E5%B7%A5%E7%A8%8Bjar%E5%8C%85%E9%87%8D%E5%A4%8D%E5%BC%95%E5%85%A5%E6%8A%A5%E9%94%99/"/>
    <id>https://arnoforst.github.io/2017/10/27/AndroidStudio 工程jar包重复引入报错/</id>
    <published>2017-10-27T03:17:24.000Z</published>
    <updated>2019-06-27T06:22:14.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="app-transformClassesWithJarMergingForDebug"><a href="#app-transformClassesWithJarMergingForDebug" class="headerlink" title="app:transformClassesWithJarMergingForDebug"></a>app:transformClassesWithJarMergingForDebug</h2><hr><p>工程中，如果我们叫A，要引用的两个三方库分别叫B和C。</p><p>其中B包含了若干小jar包，比如其中有一个叫d，C中也包含了同样的jar包d。</p><p>那么我们直接应用这两个库的时候，编译过程会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Execution failed <span class="keyword">for</span> task <span class="string">':app:transformClassesWithJarMergingForDebug'</span>.</span><br></pre></td></tr></table></figure><p>那么我们只需要在其中库中「去掉」jar包的引用，或者说过滤掉。</p><p>可以切换到「Project」视图， 查看比较两者间有什么库是一样的名字。这里我举了个例子：</p><p><img src="https://i.imgur.com/grwZaIA.png" alt="rxjava包冲突"></p><p>在MANIFEST.MF文件中,找到要过滤的包名: <strong>io.reactivex.java</strong></p><p><img src="https://i.imgur.com/QhKFots.png" alt="Bundle-SymbolicName的字段"></p><p>在gradle文件中，引用工程后面添加过滤的包名。这里我将rx有关的都过滤了，（使用的是AS3.0有了新的关键字implementation<a href="https://stackoverflow.com/questions/44493378/whats-the-difference-between-implementation-and-compile-in-gradle" target="_blank" rel="noopener">具体看这里</a>）</p><p><img src="https://i.imgur.com/IIMN7Rv.png" alt="添加group"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">'cn.bmob.android:bmob-sdk:3.5.5'</span>) &#123;</span><br><span class="line">    exclude <span class="string">group:</span> <span class="string">'io.reactivex'</span></span><br><span class="line">&#125;</span><br><span class="line">compile(<span class="string">'com.kymjs.rxvolley:rxvolley:1.1.4'</span>) &#123;</span><br><span class="line">    exclude <span class="string">group:</span> <span class="string">'io.reactivex'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译一下，就可以正常运行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;app-transformClassesWithJarMergingForDebug&quot;&gt;&lt;a href=&quot;#app-transformClassesWithJarMergingForDebug&quot; class=&quot;headerlink&quot; title=&quot;app:tran
      
    
    </summary>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
      <category term="三方集成" scheme="https://arnoforst.github.io/tags/%E4%B8%89%E6%96%B9%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>ListView和RecyclerView中item中宽度不占满的一种可能</title>
    <link href="https://arnoforst.github.io/2017/10/25/ListView%E5%92%8CRecyclerView%E4%B8%ADitem%E4%B8%AD%E5%AE%BD%E5%BA%A6%E4%B8%8D%E5%8D%A0%E6%BB%A1%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8F%AF%E8%83%BD/"/>
    <id>https://arnoforst.github.io/2017/10/25/ListView和RecyclerView中item中宽度不占满的一种可能/</id>
    <published>2017-10-25T01:48:46.000Z</published>
    <updated>2019-06-27T06:19:05.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ListView和RecyclerView中item中宽度不占满的一种可能"><a href="#ListView和RecyclerView中item中宽度不占满的一种可能" class="headerlink" title="ListView和RecyclerView中item中宽度不占满的一种可能"></a>ListView和RecyclerView中item中宽度不占满的一种可能</h2><p>公司里有个项目，用到一个简单的ListView，我在item里写了match_parent属性，但是在运行中却并没有占满一整行，就导致了布局有问题。</p><p>在使用ListView的Adapter中,我们在getView方法里是这样的写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;   </span><br><span class="line">   <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        convertView = inflate(R.layout.item_lv_test, <span class="keyword">null</span>); </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的第二个参数是放parent，通常情况下之前一直在用null，但是这次却行不通了。问题在其实还真就在于这个null上。</p><p>点进去去看了下源码，发现inflate里还有一个方法。</p><p><img src="https://i.imgur.com/fi1OiMk.png" alt></p><p>查阅资料，发现了我代码的问题。</p><h2 id="1-如果设置为null："><a href="#1-如果设置为null：" class="headerlink" title="1.如果设置为null："></a>1.如果设置为null：</h2><p>根布局设置的高度是不起作用的，即使根布局是一个控件，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">"abc"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这时200dp不起作用，而是根据里面的文字大小来决定item的高度,比如如下起作用:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">"abc"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:textSize</span>=<span class="string">"200dp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>根布局是一个layout的情况下，根布局的高度也不起作用，而是里面子控件的高度起作用，比如下面item的高度是100dp：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果里面的内容设置为match_parent,效果跟第一个一样，根据文字大小来决定item高度，因为parent设置的高度没用，所以里面子空间match_parent也没用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对传null总结："><a href="#对传null总结：" class="headerlink" title="对传null总结："></a>对传null总结：</h3><p>设置为null时，因为没有父亲，根布局的layout_height没有作用，子布局的layout_height为绝对值时有用，为相对值（match_parent,wrap_content）时没用，里面内容的高度决定了item的高度（根部局为普通空间时，控件内容决定item高度，根布局为layout时，子控件设置的绝对高度或子控件的内容决定item高度）</p><h2 id="2-如果传入三个参数"><a href="#2-如果传入三个参数" class="headerlink" title="2.如果传入三个参数##"></a>2.如果传入三个参数##</h2><p>如果parent设置为getview传入的parent（第三个参数false），则根布局设置的高度就有用了：</p><p>比如上面第一个就是200dp了</p><p>如果这时候，根部局设置为match_parent，则根据里面内容来适配，比如以下item高度跟上面第一个一样，为文字的高度：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下高度变成了200dp:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样这个在RecyclerView中也是，总结起来是自己当初用的时候太过着急没仔细看看这个方法是什么用的。以此来记录这次小坑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ListView和RecyclerView中item中宽度不占满的一种可能&quot;&gt;&lt;a href=&quot;#ListView和RecyclerView中item中宽度不占满的一种可能&quot; class=&quot;headerlink&quot; title=&quot;ListView和RecyclerV
      
    
    </summary>
    
      <category term="开发" scheme="https://arnoforst.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://arnoforst.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Windows中的一些快捷键</title>
    <link href="https://arnoforst.github.io/2017/10/25/Windows%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://arnoforst.github.io/2017/10/25/Windows快捷键/</id>
    <published>2017-10-25T00:36:02.000Z</published>
    <updated>2018-05-11T08:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Winodws快捷键"><a href="#Winodws快捷键" class="headerlink" title="Winodws快捷键"></a>Winodws快捷键</h2><p>根据Microsoft官网:2017年10月18日 - 修订版本： 8<br>(这篇文章中的信息适用于:<br>Windows 10, Windows 8.1, Windows 7)</p><h2 id="复制、粘贴及其他常规的键盘快捷方式"><a href="#复制、粘贴及其他常规的键盘快捷方式" class="headerlink" title="复制、粘贴及其他常规的键盘快捷方式"></a>复制、粘贴及其他常规的键盘快捷方式</h2><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + X</td><td align="left">剪切选定项</td></tr><tr><td align="left">Ctrl + C（或 Ctrl + Insert）</td><td align="left">复制选定项</td></tr><tr><td align="left">Ctrl + V（或 Shift + Insert）</td><td align="left">粘贴选定项</td></tr><tr><td align="left">Ctrl + Z</td><td align="left">撤消操作</td></tr><tr><td align="left">Alt + Tab</td><td align="left">在打开的应用之间切换</td></tr><tr><td align="left">Alt + F4</td><td align="left">关闭活动项，或者退出活动应用</td></tr><tr><td align="left">Windows 徽标键  + L</td><td align="left">锁定你的电脑</td></tr><tr><td align="left">Windows 徽标键  + D</td><td align="left">显示和隐藏桌面</td></tr><tr><td align="left">F2</td><td align="left">重命名选定项</td></tr><tr><td align="left">F3</td><td align="left">在文件资源管理器中搜索文件或文件夹</td></tr><tr><td align="left">F4</td><td align="left">在文件资源管理器中显示地址栏列表</td></tr><tr><td align="left">F5</td><td align="left">刷新活动窗口</td></tr><tr><td align="left">F6</td><td align="left">循环浏览窗口中或桌面上的屏幕元素</td></tr><tr><td align="left">F10</td><td align="left">激活活动应用中的菜单栏</td></tr><tr><td align="left">Alt + F8</td><td align="left">在登录屏幕上显示你的密码</td></tr><tr><td align="left">Alt + Esc</td><td align="left">按项目打开顺序循环浏览</td></tr><tr><td align="left">Alt + 带下划线的字母</td><td align="left">执行该字母相关的命令</td></tr><tr><td align="left">Alt + Enter</td><td align="left">显示所选项目的属性</td></tr><tr><td align="left">Alt + 空格键</td><td align="left">打开活动窗口的快捷方式菜单</td></tr><tr><td align="left">Alt + 向左键</td><td align="left">返回</td></tr><tr><td align="left">Alt + 向右键</td><td align="left">前进</td></tr><tr><td align="left">Alt + Page Up</td><td align="left">向上移动一个屏幕</td></tr><tr><td align="left">Alt + Page Down</td><td align="left">向下移动一个屏幕</td></tr><tr><td align="left">Ctrl + F4</td><td align="left">关闭活动文档（在可全屏显示并允许你同时打开多个文档的应用中）</td></tr><tr><td align="left">Ctrl + A</td><td align="left">选择文档或窗口中的所有项目</td></tr><tr><td align="left">Ctrl + D（或 Delete）</td><td align="left">删除所选的项目，将其移至回收站</td></tr><tr><td align="left">Ctrl + R（或 F5）</td><td align="left">刷新活动窗口</td></tr><tr><td align="left">Ctrl + Y</td><td align="left">恢复操作</td></tr><tr><td align="left">Ctrl + 向右键</td><td align="left">将光标移动到下一个字词的起始处</td></tr><tr><td align="left">Ctrl + 向左键</td><td align="left">将光标移动到上一个字词的起始处</td></tr><tr><td align="left">Ctrl + 向下键</td><td align="left">将光标移动到下一段落的起始处</td></tr><tr><td align="left">Ctrl + 向上键</td><td align="left">将光标移动到上一段落的起始处</td></tr><tr><td align="left">Ctrl + Alt + Tab</td><td align="left">使用箭头键在所有打开的应用之间进行切换</td></tr><tr><td align="left">Ctrl + Alt + Shift + 箭头键</td><td align="left">当组或磁贴的焦点放在“开始”菜单上时，可将其朝指定方向移动</td></tr><tr><td align="left">Ctrl + 箭头键（移至某个项目）+ 空格键</td><td align="left">选择窗口中或桌面上的多个单独项目</td></tr><tr><td align="left">Ctrl + Shift（及箭头键）</td><td align="left">选择文本块</td></tr><tr><td align="left">Ctrl + Esc</td><td align="left">打开“开始”屏幕</td></tr><tr><td align="left">Ctrl + Shift + Esc</td><td align="left">打开任务管理器</td></tr><tr><td align="left">Ctrl + Shift</td><td align="left">如果多种键盘布局可用，则可切换键盘布局</td></tr><tr><td align="left">Ctrl + 空格键</td><td align="left">打开或关闭的中文输入法编辑器 (IME)</td></tr><tr><td align="left">Shift + F10</td><td align="left">显示所选项目的快捷方式菜单</td></tr><tr><td align="left">按 Shift 与任何箭头键</td><td align="left">在窗口中或桌面上选择多个项目，或在文档中选择文本</td></tr><tr><td align="left">Shift + Delete</td><td align="left">删除选定项，无需先移动到回收站</td></tr><tr><td align="left">向右键</td><td align="left">打开右侧的下一个菜单，或打开子菜单</td></tr><tr><td align="left">向左键</td><td align="left">打开左侧的下一个菜单，或关闭子菜单</td></tr><tr><td align="left">Esc</td><td align="left">停止或离开当前任务</td></tr></tbody></table><h2 id="Windows-徽标键键盘快捷方式"><a href="#Windows-徽标键键盘快捷方式" class="headerlink" title="Windows 徽标键键盘快捷方式"></a>Windows 徽标键键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Windows 徽标键</td><td align="left">打开或关闭“开始”屏幕</td></tr><tr><td align="left">Windows 徽标键  + A</td><td align="left">打开操作中心</td></tr><tr><td align="left">Windows 徽标键  + B</td><td align="left">将焦点放在通知区域上</td></tr><tr><td align="left">Windows 徽标键  + C</td><td align="left">在侦听模式下打开 Cortana</td></tr><tr><td align="left">Windows 徽标键  + Shift + C</td><td align="left">打开超级按钮菜单</td></tr><tr><td align="left">Windows 徽标键  + D</td><td align="left">显示和隐藏桌面</td></tr><tr><td align="left">Windows 徽标键  + Alt + D</td><td align="left">显示和隐藏桌面上的日期和时间</td></tr><tr><td align="left">Windows 徽标键  + E</td><td align="left">打开文件资源管理器</td></tr><tr><td align="left">Windows 徽标键  + F</td><td align="left">打开反馈中心并获取屏幕截图</td></tr><tr><td align="left">Windows 徽标键  + G</td><td align="left">打开游戏栏（当游戏处于打开状态时）</td></tr><tr><td align="left">Windows 徽标键  + H</td><td align="left">开始听写</td></tr><tr><td align="left">Windows 徽标键  + I</td><td align="left">打开“设置”</td></tr><tr><td align="left">Windows 徽标键  + J</td><td align="left">请将焦点设置到可用的 Windows 提示。</td></tr><tr><td align="left">Windows 徽标键  + K</td><td align="left">打开“连接”快速操作</td></tr><tr><td align="left">Windows 徽标键  + L</td><td align="left">锁定你的电脑或切换帐户</td></tr><tr><td align="left">Windows 徽标键  + M</td><td align="left">最小化所有窗口</td></tr><tr><td align="left">Windows 徽标键  + O</td><td align="left">锁定设备方向</td></tr><tr><td align="left">Windows 徽标键  + P</td><td align="left">选择演示显示模式</td></tr><tr><td align="left">Windows 徽标键  + R</td><td align="left">打开“运行”对话框</td></tr><tr><td align="left">Windows 徽标键  + S</td><td align="left">打开“搜索”</td></tr><tr><td align="left">Windows 徽标键  + T</td><td align="left">循环浏览任务栏上的应用</td></tr><tr><td align="left">Windows 徽标键  + U</td><td align="left">打开“轻松使用设置中心”</td></tr><tr><td align="left">Windows 徽标键  + V</td><td align="left">循环浏览通知</td></tr><tr><td align="left">Windows 徽标键  + Shift + V</td><td align="left">以相反顺序循环浏览通知</td></tr><tr><td align="left">Windows 徽标键  + X</td><td align="left">打开“快速链接”菜单</td></tr><tr><td align="left">Windows 徽标键  + Y</td><td align="left">在 Windows Mixed Reality 与桌面之间切换输入</td></tr><tr><td align="left">Windows 徽标键  + Z</td><td align="left">以全屏模式显示应用中可用的命令</td></tr><tr><td align="left">Windows 徽标键  + 句点 (.) 或分号 (;)</td><td align="left">打开表情符号面板</td></tr><tr><td align="left">Windows 徽标键  + 逗号 (,)</td><td align="left">临时速览桌面</td></tr><tr><td align="left">Windows 徽标键  + Pause 键</td><td align="left">显示“系统属性”对话框</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + F</td><td align="left">搜索电脑（如果已连接到网络）</td></tr><tr><td align="left">Windows 徽标键  + Shift + M</td><td align="left">还原桌面上的最小化窗口</td></tr><tr><td align="left">Windows 徽标键  + 数字</td><td align="left">打开桌面，然后启动固定到任务栏的应用（位于数字所指明的位置）。如果应用已处于运行状态，则切换至该应用。</td></tr><tr><td align="left">Windows 徽标键  + Shift + 数字</td><td align="left">打开桌面，然后启动固定到任务栏的应用新实例（位于数字所指明的位置）</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + 数字</td><td align="left">打开桌面，然后切换至固定到任务栏的应用的最后活动窗口（位于数字所指明的位置）</td></tr><tr><td align="left">Windows 徽标键  + Alt + 数字</td><td align="left">打开桌面，然后打开固定到任务栏的应用的“跳转列表”（位于数字所指明的位置）</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + Shift + 数字</td><td align="left">打开桌面，然后以管理员身份打开位于任务栏上指定位置的应用新实例</td></tr><tr><td align="left">Windows 徽标键  + Tab</td><td align="left">打开任务视图</td></tr><tr><td align="left">Windows 徽标键  向上键</td><td align="left">最大化窗口</td></tr><tr><td align="left">Windows 徽标键  向下键</td><td align="left">删除屏幕上的当前应用并最小化桌面窗口</td></tr><tr><td align="left">Windows 徽标键  + 向左键</td><td align="left">最大化屏幕左侧的应用或桌面窗口</td></tr><tr><td align="left">Windows 徽标键  + 向右键</td><td align="left">最大化屏幕右侧的应用或桌面窗口</td></tr><tr><td align="left">Windows 徽标键  + Home</td><td align="left">最小化活动桌面窗口之外的所有窗口（在第二个笔划时还原所有窗口）</td></tr><tr><td align="left">Windows 徽标键  + Shift + 向上键</td><td align="left">将桌面窗口拉伸至屏幕顶部和底部</td></tr><tr><td align="left">Windows 徽标键  + Shift + 向下键</td><td align="left">在垂直方向上还原/最小化活动桌面窗口，而宽度保持不变</td></tr><tr><td align="left">Windows 徽标键  Shift + 向左键或向右键</td><td align="left">将桌面上的应用或窗口从一台显示器移动至另一台显示器</td></tr><tr><td align="left">Windows 徽标键  + 空格键</td><td align="left">切换输入语言和键盘布局</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + 空格键</td><td align="left">对之前选择的输入所做的更改</td></tr><tr><td align="left">Windows 徽标键 + Ctrl + Enter</td><td align="left">打开“讲述人”</td></tr><tr><td align="left">Windows 徽标键  + 正斜杠 (/)</td><td align="left">开始输入法复原流程</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + V</td><td align="left">打开肩式分接设备</td></tr></tbody></table><h2 id="命令提示符键盘快捷方式"><a href="#命令提示符键盘快捷方式" class="headerlink" title="命令提示符键盘快捷方式"></a>命令提示符键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + C（或 Ctrl + Insert）</td><td align="left">复制选定文本</td></tr><tr><td align="left">Ctrl + V（或 Shift + Insert）</td><td align="left">粘贴选定文本</td></tr><tr><td align="left">Ctrl + M</td><td align="left">输入标记模式</td></tr><tr><td align="left">Alt + 所选择的键</td><td align="left">开始在块模式下选择</td></tr><tr><td align="left">箭头键</td><td align="left">按指定方向移动光标</td></tr><tr><td align="left">Page up</td><td align="left">将光标向上移动一个页面</td></tr><tr><td align="left">Page down</td><td align="left">将光标向下移动一个页面</td></tr><tr><td align="left">Ctrl + Home（标记模式）</td><td align="left">将光标移动到缓冲区起始处</td></tr><tr><td align="left">Ctrl + End（标记模式）</td><td align="left">将光标移动到缓冲区结尾处</td></tr><tr><td align="left">Ctrl + 向上键</td><td align="left">在输出历史记录中上移一行</td></tr><tr><td align="left">Ctrl + 向下键</td><td align="left">在输出历史记录中下移一行</td></tr><tr><td align="left">Ctrl + Home（历史记录导航）</td><td align="left">如果命令行为空，则将视区移动到缓冲区顶部。否则，请删除命令行中光标左侧的所有字符。</td></tr><tr><td align="left">Ctrl + End（历史记录导航）</td><td align="left">如果命令行为空，则将视区移动到命令行。否则，请删除命令行中光标右侧的所有字符。</td></tr></tbody></table><h2 id="对话框键盘快捷方式"><a href="#对话框键盘快捷方式" class="headerlink" title="对话框键盘快捷方式"></a>对话框键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">对话框键盘快捷方式</td><td align="left"></td></tr><tr><td align="left">按键</td><td align="left">操作</td></tr><tr><td align="left">F4</td><td align="left">显示活动列表中的项目</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">在选项卡中向前移动</td></tr><tr><td align="left">Ctrl + Shift + Tab</td><td align="left">在选项卡中向后移动</td></tr><tr><td align="left">Ctrl + 数字（数字 1–9）</td><td align="left">移动到第 n 个选项卡</td></tr><tr><td align="left">Tab</td><td align="left">在选项中向前移动</td></tr><tr><td align="left">Shift + Tab</td><td align="left">在选项中向后移动</td></tr><tr><td align="left">Alt + 带下划线的字母</td><td align="left">执行可与该字母结合使用的命令（或选择该选项）</td></tr><tr><td align="left">空格键</td><td align="left">如果活动选项为复选框，则选择或清除复选框</td></tr><tr><td align="left">Backspace</td><td align="left">如果在“另存为”或“打开”对话框中选择文件夹，则打开上一级别的文件夹</td></tr><tr><td align="left">箭头键</td><td align="left">如果活动选项是一组选项按钮，请选择一个按钮</td></tr></tbody></table><h2 id="文件资源管理器键盘快捷方式"><a href="#文件资源管理器键盘快捷方式" class="headerlink" title="文件资源管理器键盘快捷方式"></a>文件资源管理器键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Alt + D</td><td align="left">选择地址栏</td></tr><tr><td align="left">Ctrl + E</td><td align="left">选择搜索框</td></tr><tr><td align="left">Ctrl + F</td><td align="left">选择搜索框</td></tr><tr><td align="left">Ctrl + N</td><td align="left">打开新窗口</td></tr><tr><td align="left">Ctrl + W</td><td align="left">关闭活动窗口</td></tr><tr><td align="left">Ctrl + 鼠标滚轮</td><td align="left">更改文件和文件夹图标的大小和外观</td></tr><tr><td align="left">Ctrl + Shift + E</td><td align="left">显示选定文件夹上所有级别文件夹</td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="left">新建文件夹</td></tr><tr><td align="left">Num Lock + 星号 (*)</td><td align="left">显示选定文件夹下所有子文件夹</td></tr><tr><td align="left">Num Lock + 加号 (+)</td><td align="left">显示选定文件夹中的内容</td></tr><tr><td align="left">Num Lock + 减号 (-)</td><td align="left">折叠选定文件夹</td></tr><tr><td align="left">Alt + P</td><td align="left">显示预览面板</td></tr><tr><td align="left">Alt + Enter</td><td align="left">打开选定项目的“属性”对话框</td></tr><tr><td align="left">Alt + 向右键</td><td align="left">查看下一个文件夹</td></tr><tr><td align="left">Alt + 向上键</td><td align="left">查看该文件夹所在的文件夹</td></tr><tr><td align="left">Alt + 向左键</td><td align="left">查看上一个文件夹</td></tr><tr><td align="left">Backspace</td><td align="left">查看上一个文件夹</td></tr><tr><td align="left">向右键</td><td align="left">显示当前选择内容（如果已折叠），或选择第一个子文件夹</td></tr><tr><td align="left">向左键</td><td align="left">折叠当前所选内容（如果已展开），或选择该文件夹所在的文件夹</td></tr><tr><td align="left">End</td><td align="left">显示活动窗口底部</td></tr><tr><td align="left">Home</td><td align="left">显示活动窗口顶部</td></tr><tr><td align="left">F11</td><td align="left">最大化或最小化活动窗口</td></tr></tbody></table><h2 id="虚拟桌面的键盘快捷方式"><a href="#虚拟桌面的键盘快捷方式" class="headerlink" title="虚拟桌面的键盘快捷方式"></a>虚拟桌面的键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Windows 徽标键  + Tab</td><td align="left">打开“任务视图”</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + D</td><td align="left">添加虚拟桌面</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + 向右键</td><td align="left">在你于右侧创建的虚拟桌面之间切换</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + 向左键</td><td align="left">在你于左侧创建的虚拟桌面之间切换</td></tr><tr><td align="left">Windows 徽标键  + Ctrl + F4</td><td align="left">关闭你正在使用的虚拟桌面</td></tr></tbody></table><h2 id="任务栏键盘快捷方式"><a href="#任务栏键盘快捷方式" class="headerlink" title="任务栏键盘快捷方式"></a>任务栏键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Shift + 单击任务栏按钮</td><td align="left">打开应用或快速打开另一个应用实例</td></tr><tr><td align="left">Ctrl + Shift + 单击任务栏按钮</td><td align="left">以管理员身份打开应用</td></tr><tr><td align="left">Shift + 右键单击任务栏按钮</td><td align="left">显示应用的窗口菜单</td></tr><tr><td align="left">Shift + 右键单击分组任务栏按钮</td><td align="left">显示组窗口菜单</td></tr><tr><td align="left">Ctrl + 单击分组任务栏按钮</td><td align="left">循环浏览组窗口</td></tr></tbody></table><h2 id="任务栏键盘快捷方式-1"><a href="#任务栏键盘快捷方式-1" class="headerlink" title="任务栏键盘快捷方式"></a>任务栏键盘快捷方式</h2><hr><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Windows 徽标键  + I</td><td align="left">打开设置</td></tr><tr><td align="left">Backspace</td><td align="left">返回至设置主页</td></tr><tr><td align="left">使用搜索框在任何页面上键入</td><td align="left">搜索设置</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Winodws快捷键&quot;&gt;&lt;a href=&quot;#Winodws快捷键&quot; class=&quot;headerlink&quot; title=&quot;Winodws快捷键&quot;&gt;&lt;/a&gt;Winodws快捷键&lt;/h2&gt;&lt;p&gt;根据Microsoft官网:2017年10月18日 - 修订版本： 8&lt;br
      
    
    </summary>
    
      <category term="技巧" scheme="https://arnoforst.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
      <category term="Windows" scheme="https://arnoforst.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>记一次折腾过程（二）</title>
    <link href="https://arnoforst.github.io/2017/10/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E8%BF%87%E7%A8%8B(%E4%BA%8C)/"/>
    <id>https://arnoforst.github.io/2017/10/24/记一次折腾过程(二)/</id>
    <published>2017-10-24T06:29:01.000Z</published>
    <updated>2017-10-25T01:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二次折腾"><a href="#第二次折腾" class="headerlink" title=" 第二次折腾:"></a> 第二次折腾:</h2><p>在稳定的使用一段时间后,有一天突然不能访问了。<br>想到后台看一眼，没想到官网来了这样一段文字。</p><p><img src="https://i.imgur.com/6dteqRt.png" alt></p><p>为了避免之前其他的提供商那句：“相会有时，后会无期”的话。我还是别等了。</p><h2 id="VPS："><a href="#VPS：" class="headerlink" title="VPS："></a>VPS：</h2><hr><p><img src="https://i.imgur.com/ZW9lkbz.png" alt></p><p>其实之前没搞VPS是因为需要信用卡或者PayPal，当时还没有。不过现在终于有了，又重新找了找发现有的提供商付款选项里有个支付宝，马云爸爸还是厉害啊。（比特币笑而不语）</p><p><img src="https://i.imgur.com/aaSERVz.png" alt></p><p>VPS的选择也有很多，可以上知乎看一看。别着急，耐心的看一看你是否都需要那么多配置，你需要为你过剩的CPU，内存以及硬盘空间来买单的。当然，性能越好，可做的事情就越多。你可以搭个服务器，跑点PHP，远程下载balabala的。</p><p>选择好你的服务器确定好系统后，我们可以开始了。（注：这里最好使用Linux 比Windows便宜很多而且Linux毕竟是专门干这种的，而且这里还有一个坑就是可能给你的IP也被*了，具体有没有Ping一下就行了，如果发生了咱态度诚恳点找一下客服给你换个IP解决）</p><p><img src="https://i.imgur.com/MQedmiO.png" alt="这是一个悲伤的故事"></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><hr><p>然后我们需要用到SSH连接工具来登录我们的服务器。</p><p>Mac和Linux下直接在终端中输入命令，连接后直接输入你的登录密码就可以直接连接。<br>在Windows系统下需要专门的客户端来SSH登录VPS。在<a href="http://www.netsarang.com/download/down_form.html?code=522&utm_source=textarea.com&utm_medium=textarea.com&utm_campaign=article" target="_blank" rel="noopener">Xshell</a>官网下载。</p><pre><code>ssh root@your_VPS_ipAddress</code></pre><p><strong>安装Shadowsocks：</strong></p><p>Debian / Ubuntu:</p><pre><code>apt-get install python-pippip install shadowsocks</code></pre><p>CentOS:</p><pre><code>yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocks</code></pre><p><strong>配置文件：</strong></p><p>使用vim命令来编辑 /etc/shadowsocks.json</p><pre><code>vim /etc/shadowsocks.json</code></pre><p>如果你不会用vim来保存和编辑的话，去用几分钟学习下简单的使用，这个神器还有有很多故事和强大之处的。</p><pre><code>{&quot;server&quot;:&quot;my_server_ip&quot;,&quot;server_port&quot;:8388,&quot;local_address&quot;: &quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;password&quot;:&quot;mypassword&quot;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;: false    }</code></pre><table><thead><tr><th>字段名</th><th>意义</th></tr></thead><tbody><tr><td>server</td><td>你的服务器地址</td></tr><tr><td>server_port</td><td>连接你服务器的端口</td></tr><tr><td>local_address</td><td>本地服务器地址</td></tr><tr><td>local_port</td><td>本地端口</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>timeout</td><td>超时时间（秒）</td></tr><tr><td>method</td><td>加密方式（默认：aes-256-cfb）</td></tr><tr><td>fast_open</td><td>TCP快速开启 （true / false）</td></tr></tbody></table><p>填写正确后我们保存并退出。</p><p><strong>运行:</strong></p><pre><code>ssserver -c /etc/shadowsocks.json</code></pre><p>如果一切配置顺利，你可以在你的终端看见端口正在启动，然后我们在客户端上按照之前的一样填写好我们的配置就可以了。这里的小细节，不要打错任何东西，否则两边不一致是无论如何都都建立不起来连接的。</p><p><img src="https://i.imgur.com/RV10Sah.png" alt></p><p>好了，我们又可以愉快的玩耍了~</p><h2 id="又是彩蛋："><a href="#又是彩蛋：" class="headerlink" title="又是彩蛋："></a>又是彩蛋：</h2><hr><p>没错，我们通过自己建立VPS有了一个自己的专属服务器连接，这个的速度和性能完全是根据我们选择去定制的。同时，我们会发现一个小弊端，那么就是我们如何让它一直活动，不能关闭后就不能用了，那也太坑了。</p><p>我们当然可以写一个shell脚本，放在开机自启动。这里有个比较取巧的方法。(感谢我的渣浪好室友,冠希童鞋:手动撒花~)</p><blockquote><h3 id="保持SS运行"><a href="#保持SS运行" class="headerlink" title="保持SS运行"></a>保持SS运行</h3></blockquote><blockquote><p><strong>使用screen命令进行远程回话管理流程：</strong></p><ol><li>ssh登陆到远程机器上</li><li>键入screen建立一个新的会话窗口</li><li>在这个新的会话窗口中运行命令（通常是一些时间较长的任务），键入C-a d，退出并保存该会话窗口<br>（这之后可以退出ssh登陆的终端，下次工作时重新ssh登陆，再进行如下步骤）</li><li>screen -ls列出所有会话</li><li>screen -r id重新连接会话</li><li>使用exit真正退出会话</li></ol></blockquote><p>该命令真正强大之处是退出远程登陆后，<strong>screen依然会替我们管理保存的会话</strong>，在后台执行，我们再次远程登陆后可以恢复任何会话的现场，<strong>适用于时间较长的任务</strong>。</p><p>其中C-a d是<code>ctrl</code> + <code>A</code> + <code>D</code>一起键入。</p><p>这样我们在screen中运行启动命令，然后按<code>ctrl</code> + <code>A</code> + <code>D</code>退出。<br>再断开连接的时候就不会中断这个命令，可以放心的关闭SSH连接了。</p><hr><p><strong>当然正统的方法是这样的：</strong></p><p><strong>添加应用到service：</strong><br>创建脚本 <code>/etc/init.d/shadowsocks</code> 文件（其实也是 <code>/etc/rc.d/init.d/shadowsocks</code> 文件）</p><pre><code>sudo vim /etc/init.d/shadowsocks</code></pre><p>添加以下内容：</p><pre><code>#!/bin/sh## shadowsocks start/restart/stop shadowsocks## chkconfig: 2345 85 15# description: start shadowsocks/ssserver at boot timestart(){        ssserver -c /etc/shadowsocks.json -d start}stop(){        ssserver -c /etc/shadowsocks.json -d stop}restart(){        ssserver -c /etc/shadowsocks.json -d restart}case &quot;$1&quot; instart)        start        ;;stop)        stop        ;;restart)        restart        ;;*)        echo &quot;Usage: $0 {start|restart|stop}&quot;        exit 1        ;;esac</code></pre><p><strong>然后增加这个文件的可执行权限：</strong></p><pre><code>sudo chmod +x /etc/init.d/shadowsocks</code></pre><p>**<br>这样就可以在 shell 中直接运行下面的命令开启程序了（重启和停止同理）：**</p><pre><code>sudo service shadowsocks start</code></pre><blockquote><p>注意：<br>这里以root权限运行的，如果不想以root权限运行可以用 sudo -u {user} {command}。<br>如果不给脚本文件加上其他用户的可执行权限，不带参数运行 service shadowsocks 会提示 unrecognized service。</p></blockquote><p><strong>设置开机启动：</strong><br>在上面脚本没有问题（也就是保留了前面10行，并且语法正确）的情况下，通过下面的命令，就可以设置程序自动启动了</p><pre><code>sudo chkconfig shadowsocks on</code></pre><p>这样程序就会自动启动了。</p><p>结合此处两个解决方案:</p><p><a href="https://www.awaimai.com/439.html" target="_blank" rel="noopener">Linux将应用添加到service，并设置自动启动</a></p><p><a href="https://stackoverflow.com/a/20680309/6835285" target="_blank" rel="noopener">How do I install chkconfig on Ubuntu?</a></p><hr><blockquote><h3 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h3></blockquote><p>我使用的每个月有2T流量，嗯…单单使用做SS的话，的确过剩了。</p><p>我们可以开辟多个端口，为每个端口使用不同的密码来登录。</p><pre><code>{   &quot;server&quot;:&quot;my_server_ip&quot;,   &quot;local_address&quot;: &quot;127.0.0.1&quot;,   &quot;local_port&quot;:1080,    &quot;port_password&quot;: {      &quot;2333&quot;:&quot;mima12345&quot;,    &quot;6666&quot;:&quot;mima12345&quot; },   &quot;timeout&quot;:300,   &quot;method&quot;:&quot;aes-256-cfb&quot;,   &quot;fast_open&quot;: false  }</code></pre><p>这其中加密方式 我还是推荐rc4-md5的。或者他们说chacha20对移动端访问速度比较快。</p><p>主要是AES加密太耗时。</p><p>另附地址：<a href="http://calonye.com/22419.html" target="_blank" rel="noopener">多用户配置</a></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束:"></a>结束:</h2><hr><p>经过这样我们可以暂时有一个小小的窗户，来继续访问官网的最新技术。</p><p>扔给你个小软件<a href="https://sspai.com/post/38846" target="_blank" rel="noopener">HyperApp</a><del>（撒花</del>φ(&gt;ω&lt;*) ）</p><p>至此，我们已经可以实现一个很理想的状态。但是能不能更好地让家里全局的设备，比如Chromecat也支持呢？下一篇我会介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第二次折腾&quot;&gt;&lt;a href=&quot;#第二次折腾&quot; class=&quot;headerlink&quot; title=&quot; 第二次折腾:&quot;&gt;&lt;/a&gt; 第二次折腾:&lt;/h2&gt;&lt;p&gt;在稳定的使用一段时间后,有一天突然不能访问了。&lt;br&gt;想到后台看一眼，没想到官网来了这样一段文字。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
  </entry>
  
  <entry>
    <title>记一次折腾过程（一）</title>
    <link href="https://arnoforst.github.io/2017/10/24/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E8%BF%87%E7%A8%8B(%E4%B8%80)/"/>
    <id>https://arnoforst.github.io/2017/10/24/记一次折腾过程(一)/</id>
    <published>2017-10-24T05:03:08.000Z</published>
    <updated>2017-10-25T01:42:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面:"></a> 写在前面:</h2><p>做安卓的都知道，安卓是归谷歌的。谷歌很多最新的好玩儿有趣的功能，第一时间对移动端的支持大部分也都是在安卓上。身为平常娱乐，有些东西可有可无，也就作罢。但是身为一名开发者，你经常要了解最新的咨询需要上官网，那么这个官网还不能访问，这种情况是不能容忍的。本文是我对这系列折腾过程的记录，当做一个对过去的总结。</p><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><hr><blockquote><p>整体软件环境</p></blockquote><p>安卓的开源是便利的，但同样是危险的。当开发者发现安卓的各种可定制的功能时，同样也是对一名开发者或者说一个软件团队的技术与「道德」的考验。</p><p>常驻后台，相互唤醒。国内安卓的App市场里各种应用的审核并不像想想象中那么严，尤其是身为一名开发者后，发现国内环境的确没有Play Store上那种基于机器学习App检测系统更安全。</p><p>如果你可以可以看看QQ在Play Store上的功能要简约明朗很多，我想无论如何Play Store多多少少制约了一下现在这种软件的「店大欺客」的状态，什么微信<strong>必须</strong>给定位权限，支付宝<strong>必须</strong>要给电话拨打权限，否则就不让用。这相当有悖于谷歌的设计动态权限申请的原则。国内虽然也有一大堆「国人习惯」的第三方ROM来制衡这个混乱的生态圈，但这也给很多开发者带来了更多的适配兼容的问题。(´-ι_-｀)</p><blockquote><p>海外连接速度<strong>过慢</strong></p></blockquote><p>作为一个开发者，上到软件的下载，下到linux的代码仓，好多软件的更新支持都需要一个稳定速度的带宽支持。说到这点，就好比我刚开始用AS开发，一个几百兆的gradle文件愣是让我下载了半天时间，除了学校当时网速有点低之外更主要还是本身对海外节点的访问速度。</p><blockquote><p>You Can Learn More And More</p></blockquote><p>我只是一个纯粹的喜爱生活，热爱技术的人，好多东西明明应该是「无害」的，就好比我想看个谷歌IO大会的直播视频，却难以实现。好在谷歌在国内的影响力又渐渐有了些起色，虽然现在也有腾讯的同声转播，但是总感觉哪里有点不一样。</p><h2 id="What？"><a href="#What？" class="headerlink" title="What？"></a>What？</h2><hr><p>最简单的人们听过最多的也就是VPN，这个简单粗暴和正常软件的使用没什么太大难度。很多时候我们只是使用了一个服务商提供的已经设置好的「工具」，来直接使用，多数的直接就是提供商自己的出的软件，定制化不是很高。理论上和SS速度不应该差距太多，但是实际使用中稳定性，速度体验都有很大折扣。当然在企业里VPN这种东西还是很方便的，你可以远程访问内网环境来提交你的文件管理日常等。</p><p>我选择的是Shadowsocks，简称SS。</p><p>简单理解的话，Shadowsocks是将以前通过SSH创建的Socks5协议拆开成Server端和client端，下面这个原理图能简单介绍其翻墙原理，基本上和利用SSH tunnel大致类似：</p><p><img src="https://i.imgur.com/6ZDVSNr.png" alt></p><blockquote><ol><li>PC客户端（即你的电脑）发出请求基于Socks5协议跟SS-Local端进行通讯，由于这个SS-Local一般是本机或路由器等局域网的其他机器，不经过GFW，所以解决GFW通过特征分析进行干扰的问题。</li><li>SS-Local和SS-Server两端通过多种可选的加密方法进行通讯，经过GFW的时候因为是常规的TCP包，没有明显特征码GFW也无法对通讯数据进行解密，因此通讯放行。</li><li>SS-Server将收到的加密数据进行解密，还原初始请求，再发送到用户需要访问的服务网站，获取响应原路再返回SS-04，返回途中依然使用了加密，使得流量是普通TCP包，并成功穿过GFW防火墙。</li></ol></blockquote><h2 id="How？"><a href="#How？" class="headerlink" title="How？"></a>How？</h2><hr><p><a href="https://github.com/shadowsocksr-backup/shadowsocks-rss" target="_blank" rel="noopener">各平台位置</a></p><blockquote><p>（注： 这里的SS和SSR还是有区别的 不过本篇暂且不说。）<br>找到一个稳定的提供商，根据节点信息来填写后连接就好。而且二维码的加入更是降低了用户门槛，很多时候只需要点击客户端的扫描二维码就可以啦！</p></blockquote><p><img src="https://i.imgur.com/09eRspU.png" alt></p><p>你可以在小伙伴的客户端或者提供商页面找到二维码，其实就是包含我所填入的这些信息的一段内容。</p><p><img src="https://i.imgur.com/CzREqdg.png" alt></p><p>然后我们直接点击扫描屏幕上的二维码就会拿到识别信息了。如果没有的话，手动填写即可。（这里mac客户端是SS那么没有混淆和协议选项的情况下先不写。或者有的使用的是启动参数，-O -o等）</p><p><img src="https://i.imgur.com/EhZ1piC.png" alt></p><p>最后我们可以选择服务器来切换不同的节点，同样可以开启全局。也可在需要时开启。</p><p>然后我们就可以愉快的看着我们gradle下载文件的速度变快了不少。</p><h2 id="当然还有彩蛋"><a href="#当然还有彩蛋" class="headerlink" title="当然还有彩蛋"></a>当然还有彩蛋</h2><p>这是折腾过程的第一部分，没有什么复杂的东西，如果你要是动手实现的话，估计几分钟十几分钟就能搞定。当然我们们可以做的还远不止这些。</p><blockquote><h2 id="为软件设置代理"><a href="#为软件设置代理" class="headerlink" title="为软件设置代理"></a>为软件设置代理</h2></blockquote><ol><li>公司里大局域网屏蔽了一切和音视频相关的内容网站和信息，连网易云音乐都不让听。小伙伴们可着急了，音乐是动力啊有木有。 </li><li>全局代理虽然简单暴力，让你直接达到直连的效果。但是你会发现会有很多弊端：访问国内网站时候我们仍然会走这个代理模式，这就导致了速度变慢，而且很多提供商每个月的流量也都有限。虽然正常使用下流量基本够用，但是也是浪费了不必要的资源。</li></ol><p>在运行客户端后我们开始，选择设置中为局域网开启代理。</p><p><img src="https://i.imgur.com/a2cbV80.png" alt></p><p>然后在网易云音乐里的设置里找到下载，填写好本地地址和端口，点击测试发现代理可用，然后重启软件，发现每日推荐又活过来了。</p><p><img src="https://i.imgur.com/yeLt6ag.png" alt></p><p>以此类推，你会发现好多软件都可以这样设置代理。达到节约流量和不影响你日常的网速效果。</p><blockquote><h2 id="更灵活的配置方式-PAC"><a href="#更灵活的配置方式-PAC" class="headerlink" title="更灵活的配置方式 PAC"></a>更灵活的配置方式 PAC</h2></blockquote><blockquote><p>代理自动配置（英语：Proxy auto-config，简称PAC）是一种网页浏览器技术，用于定义浏览器该如何自动选择适当的代理服务器来访问一个网址。<br>一个PAC文件包含一个JavaScript形式的函数“FindProxyForURL(url, host)”。这个函数返回一个包含一个或多个访问规则的字符串。用户代理根据这些规则适用一个特定的代理器或者直接访问。当一个代理服务器无法响应的时候，多个访问规则提供了其他的后备访问方法。浏览器在访问其他页面以前，首先访问这个PAC文件。PAC文件中的URL可能是手工配置的，也可能是是通过网页的网络代理自动发现协议（WPAD）自动配置的。</p></blockquote><p>简单来说就是国内走国内，国外走代理。<br>你可以在客户端找到这个选项，我们可以设置国内不走这个节点，国外自动走代理。</p><p><img src="https://i.imgur.com/F9WTFks.png" alt></p><p>这里我用了一个好像不是最优不过也还好：</p><blockquote><p><a href="http://jiasd123.oss-cn-hangzhou.aliyuncs.com/list.txt" target="_blank" rel="noopener">http://jiasd123.oss-cn-hangzhou.aliyuncs.com/list.txt</a></p></blockquote><p>同样我们可以自己通过JS编辑规则，来实现更高度的定制化。语法规则和具体，可以查阅这几个参考资料:</p><ul><li><a href="http://www.cnblogs.com/edward2013/p/5560836.html" target="_blank" rel="noopener">浅析PAC，教你动手修改你的PAC文件及user-rule文件实现自动代理</a></li><li><a href="https://zhuanlan.zhihu.com/p/22166179?refer=barretlee" target="_blank" rel="noopener">详解代理自动配置 PAC-知乎专栏</a></li><li><a href="http://blog.csdn.net/xundh/article/details/48193369" target="_blank" rel="noopener">PAC脚本语法（代理自动配置）</a></li></ul><p><img src="https://i.imgur.com/L4unCUQ.png" alt></p><p>我们还可以通过软件来直接在Chrome上集成这种自动切换的插件。</p><p>比如：<a href="https://switchyomega.com/" target="_blank" rel="noopener">proxy-switchyomega</a> </p><p>跟着教程走一遍，你会发现PAC的神器之处。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><hr><p>祝下载不再缓慢，祝git把把顺畅。<br>当然我们只是走了第一步，还有很多可提升的空间，后续我会再写两篇。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot; 写在前面:&quot;&gt;&lt;/a&gt; 写在前面:&lt;/h2&gt;&lt;p&gt;做安卓的都知道，安卓是归谷歌的。谷歌很多最新的好玩儿有趣的功能，第一时间对移动端的支持大部分也都是在安卓上。身为平常
      
    
    </summary>
    
    
      <category term="Geek" scheme="https://arnoforst.github.io/tags/Geek/"/>
    
  </entry>
  
  <entry>
    <title>2017七夕</title>
    <link href="https://arnoforst.github.io/2017/08/26/2017%E4%B8%83%E5%A4%95/"/>
    <id>https://arnoforst.github.io/2017/08/26/2017七夕/</id>
    <published>2017-08-26T11:36:19.000Z</published>
    <updated>2019-05-15T08:50:53.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017七夕"><a href="#2017七夕" class="headerlink" title=" 2017七夕"></a> 2017七夕</h2><p>我爱你，没有技巧，野蛮真诚。</p><p>老婆：</p><p>　　2017年，七夕快乐。我知道七夕节这一天的你，还在东北往北京行驶的长途大巴上。这时候的你，或是在望着沿途公路的风景，或是翻看着手机与周围人说话，也可能因为太疲劳正睡着。为了能和以往有些不同，我先写了草稿，又打在电脑上打印出来这次的信。<br>　　<br>　　我知道工作和生活一定要平衡的好，既要把工作弄好，也要把生活过好。这样才会有权利去照顾别人，才有资格成为你身边的人。<br>　　<br>　　时光真快，转眼就是两年多的光景，感谢能有你这一路的陪伴。你说凡事顺其自然，我当然知道这句话的意思。我很珍惜能和你在一起的每段时光。这段时间经常惹你生气，我害怕，害怕每次你生气的时候。怕哪一次就真的失去你，所以每次的礼物都当是最后一次。只要我能力所及，总是想能让你过的和别人女朋友一样开心。<br>　　<br>　　对美好的东西,我总是拙于言辞,对美好的事物如此,对你也是如此。<br>　　<br>　　你知道，我想爱你。我想多主动的表达我的爱意，也错误的表达好多样子，害你总是对我有些想法，好在我们那天说开了。我想了很多种再次见到你要怎样的定格才算永久，怎样的相遇姿势才能不辜负一场不轰轰烈烈，但是刻骨铭心的爱情。　　<br>　　<br>　　我知道你内心里还是住着一个可爱善良的小公主，虽然有时候你会突然的高冷女神范儿。我问你想我没的时候，你总是违背心思的说没想我。你知道吗，虽然你叫我老公的次数很有限，但是每次都让我好开心。让我知道其实你很在乎我，也为我付出了那么多辛苦。每个周末的两天似乎是上天对我们最简单的恩赐，虽然你会经常有事去忙。但是你也从来没有因为自己太累而对我的语音要求说不，当然生气的时候除外。<br>　　<br>　　想带你走过每个春夏秋冬，不想太普通，不想落于俗套，却也不想弄得浮夸做做。</p><p>   想在你开心的时候坐在沙发上听你说天南海北，在你需要的时候有一个可以依靠的肩膀。想了解你穿衣服的风格，想明白对化妆品牌的偏爱，想知道你爱吃的每个味道。太多的想要了解，太多的想要知道。想慢慢的守着我们的幸福，简简单单却丰富多彩。<br>　　<br>　　我这段时间过得其实并不是想象中的好，但是眼前的所有都是为了能更好的见到你的考验。我也在努力争取时间，努力丰富自己，好早日在北京与你相聚。这件事情，我定不负你。<br>　　<br>　　可遇不可求，珍惜便是。<br>　　<br>　　其实我真的很想很想在七夕之前完成好它，每个机关都想着最完美的实现方式。但是任何能让你感到惊喜的机会，都不想错过。哪怕只有一毫秒的惊艳之感，就要用力去做。我不知道当这个盒子到你手里的时候,会不会是准时的七夕。准确来说它不算是一个盒子吧，我知道这又是一个毫不实用，也无处安放的东西。没有地方的话，尽管让它魂归垃圾桶。只要能让你开心这一秒，这都不算是事情。<br>　　<br>　　（如果老婆大人还有空间的话，这个小小的盒子就请先寄存在那也好。等我去北京，我帮你放着。）<br>　　<br>　　如果余生来得及，你是我所有的不介意。<br>　　<br>　　                                                            　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　徐鑫<br>　　<br>　　                                                                　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　2017年8月25日晚</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017七夕&quot;&gt;&lt;a href=&quot;#2017七夕&quot; class=&quot;headerlink&quot; title=&quot; 2017七夕&quot;&gt;&lt;/a&gt; 2017七夕&lt;/h2&gt;&lt;p&gt;我爱你，没有技巧，野蛮真诚。&lt;/p&gt;
&lt;p&gt;老婆：&lt;/p&gt;
&lt;p&gt;　　2017年，七夕快乐。我知道七夕节
      
    
    </summary>
    
    
      <category term="Life" scheme="https://arnoforst.github.io/tags/Life/"/>
    
  </entry>
  
</feed>
